// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="img_filter_hw,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.303750,HLS_SYN_LAT=615999,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=1,HLS_SYN_FF=321,HLS_SYN_LUT=664,HLS_VERSION=2018_3}" *)

module img_filter_hw (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TKEEP,
        in_r_TSTRB,
        in_r_TUSER,
        in_r_TLAST,
        in_r_TID,
        in_r_TDEST,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TUSER,
        out_r_TLAST,
        out_r_TID,
        out_r_TDEST
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [2:0] in_r_TKEEP;
input  [2:0] in_r_TSTRB;
input  [0:0] in_r_TUSER;
input  [0:0] in_r_TLAST;
input  [0:0] in_r_TID;
input  [0:0] in_r_TDEST;
output  [23:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [2:0] out_r_TKEEP;
output  [2:0] out_r_TSTRB;
output  [0:0] out_r_TUSER;
output  [0:0] out_r_TLAST;
output  [0:0] out_r_TID;
output  [0:0] out_r_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [23:0] in_V_data_V_0_data_out;
wire    in_V_data_V_0_vld_in;
wire    in_V_data_V_0_vld_out;
wire    in_V_data_V_0_ack_in;
reg    in_V_data_V_0_ack_out;
reg   [23:0] in_V_data_V_0_payload_A;
reg   [23:0] in_V_data_V_0_payload_B;
reg    in_V_data_V_0_sel_rd;
reg    in_V_data_V_0_sel_wr;
wire    in_V_data_V_0_sel;
wire    in_V_data_V_0_load_A;
wire    in_V_data_V_0_load_B;
reg   [1:0] in_V_data_V_0_state;
wire    in_V_data_V_0_state_cmp_full;
wire    in_V_dest_V_0_vld_in;
reg    in_V_dest_V_0_ack_out;
reg   [1:0] in_V_dest_V_0_state;
reg   [23:0] out_V_data_V_1_data_out;
reg    out_V_data_V_1_vld_in;
wire    out_V_data_V_1_vld_out;
wire    out_V_data_V_1_ack_in;
wire    out_V_data_V_1_ack_out;
reg   [23:0] out_V_data_V_1_payload_A;
reg   [23:0] out_V_data_V_1_payload_B;
reg    out_V_data_V_1_sel_rd;
reg    out_V_data_V_1_sel_wr;
wire    out_V_data_V_1_sel;
wire    out_V_data_V_1_load_A;
wire    out_V_data_V_1_load_B;
reg   [1:0] out_V_data_V_1_state;
wire    out_V_data_V_1_state_cmp_full;
wire   [2:0] out_V_keep_V_1_data_out;
reg    out_V_keep_V_1_vld_in;
wire    out_V_keep_V_1_vld_out;
wire    out_V_keep_V_1_ack_in;
wire    out_V_keep_V_1_ack_out;
reg    out_V_keep_V_1_sel_rd;
wire    out_V_keep_V_1_sel;
reg   [1:0] out_V_keep_V_1_state;
wire   [2:0] out_V_strb_V_1_data_out;
reg    out_V_strb_V_1_vld_in;
wire    out_V_strb_V_1_vld_out;
wire    out_V_strb_V_1_ack_in;
wire    out_V_strb_V_1_ack_out;
reg    out_V_strb_V_1_sel_rd;
wire    out_V_strb_V_1_sel;
reg   [1:0] out_V_strb_V_1_state;
wire   [0:0] out_V_user_V_1_data_out;
reg    out_V_user_V_1_vld_in;
wire    out_V_user_V_1_vld_out;
wire    out_V_user_V_1_ack_in;
wire    out_V_user_V_1_ack_out;
reg    out_V_user_V_1_sel_rd;
wire    out_V_user_V_1_sel;
reg   [1:0] out_V_user_V_1_state;
reg   [0:0] out_V_last_V_1_data_out;
reg    out_V_last_V_1_vld_in;
wire    out_V_last_V_1_vld_out;
wire    out_V_last_V_1_ack_in;
wire    out_V_last_V_1_ack_out;
reg   [0:0] out_V_last_V_1_payload_A;
reg   [0:0] out_V_last_V_1_payload_B;
reg    out_V_last_V_1_sel_rd;
reg    out_V_last_V_1_sel_wr;
wire    out_V_last_V_1_sel;
wire    out_V_last_V_1_load_A;
wire    out_V_last_V_1_load_B;
reg   [1:0] out_V_last_V_1_state;
wire    out_V_last_V_1_state_cmp_full;
wire   [0:0] out_V_id_V_1_data_out;
reg    out_V_id_V_1_vld_in;
wire    out_V_id_V_1_vld_out;
wire    out_V_id_V_1_ack_in;
wire    out_V_id_V_1_ack_out;
reg    out_V_id_V_1_sel_rd;
wire    out_V_id_V_1_sel;
reg   [1:0] out_V_id_V_1_state;
wire   [0:0] out_V_dest_V_1_data_out;
reg    out_V_dest_V_1_vld_in;
wire    out_V_dest_V_1_vld_out;
wire    out_V_dest_V_1_ack_in;
wire    out_V_dest_V_1_ack_out;
reg    out_V_dest_V_1_sel_rd;
wire    out_V_dest_V_1_sel;
reg   [1:0] out_V_dest_V_1_state;
reg    in_r_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_7_fu_360_p2;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state5;
wire   [9:0] col_2_fu_321_p2;
wire    ap_CS_fsm_state2;
reg   [7:0] buff1_V_V_din;
wire    buff1_V_V_full_n;
reg    buff1_V_V_write;
wire   [0:0] tmp_fu_315_p2;
reg   [7:0] buff2_V_V_din;
wire    buff2_V_V_full_n;
reg    buff2_V_V_write;
reg    ap_block_state2;
wire   [8:0] row_1_fu_333_p2;
reg   [8:0] row_1_reg_677;
wire    ap_CS_fsm_state3;
reg    ap_block_state3;
wire   [0:0] tmp_6_fu_339_p2;
reg   [0:0] tmp_6_reg_682;
wire   [0:0] tmp_5_fu_327_p2;
wire   [9:0] col_3_fu_366_p2;
reg   [9:0] col_3_reg_690;
wire   [7:0] buff1_V_V_dout;
wire    buff1_V_V_empty_n;
reg    buff1_V_V_read;
wire   [7:0] buff2_V_V_dout;
wire    buff2_V_V_empty_n;
reg    buff2_V_V_read;
reg    ap_block_state4;
reg    ap_block_state4_io;
wire   [23:0] tmp_data_V_fu_534_p4;
wire   [0:0] tmp_last_V_fu_551_p2;
reg   [9:0] col_reg_282;
reg   [8:0] row_reg_293;
reg   [9:0] col_1_reg_304;
reg   [7:0] swin_0_1_V_fu_178;
reg   [7:0] swin_0_1_V_1_fu_182;
reg   [7:0] tmp_V_fu_186;
reg   [7:0] swin_1_0_V_fu_190;
reg   [7:0] swin_1_1_V_fu_194;
reg   [7:0] tmp_V_1_fu_198;
reg   [7:0] swin_2_0_V_fu_202;
reg   [7:0] swin_2_1_V_fu_206;
wire   [7:0] swin_2_2_V_fu_433_p4;
wire   [7:0] p_Result_s_fu_387_p4;
wire   [7:0] p_Result_1_fu_397_p4;
wire   [8:0] rhs_V_cast_fu_411_p1;
wire   [8:0] lhs_V_cast_fu_407_p1;
wire   [8:0] ret_V_fu_415_p2;
wire   [7:0] tmp_1_fu_421_p1;
wire   [21:0] grp_fu_597_p3;
wire   [8:0] lhs_V_3_cast_fu_446_p1;
wire   [8:0] lhs_V_2_cast_fu_442_p1;
wire   [8:0] lhs_V_4_cast_fu_456_p1;
wire   [8:0] ret_V_2_fu_450_p2;
wire   [8:0] ret_V_3_fu_460_p2;
wire  signed [9:0] lhs_V_5_cast_fu_466_p1;
wire  signed [9:0] rhs_V_3_cast_fu_470_p1;
wire   [9:0] ret_V_4_fu_474_p2;
wire   [9:0] rhs_V_4_cast_fu_480_p1;
wire   [9:0] ret_V_5_fu_484_p2;
wire   [0:0] tmp_4_fu_490_p3;
wire   [9:0] p_s_fu_498_p3;
wire   [1:0] tmp_9_fu_506_p4;
wire   [0:0] icmp_fu_516_p2;
wire   [7:0] tmp_10_fu_522_p1;
wire   [7:0] tmp_8_fu_526_p3;
wire   [0:0] tmp_3_fu_545_p2;
wire   [8:0] grp_fu_597_p0;
wire   [7:0] grp_fu_597_p1;
wire   [11:0] grp_fu_597_p2;
reg   [4:0] ap_NS_fsm;
wire   [9:0] grp_fu_597_p00;
wire   [9:0] grp_fu_597_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 in_V_data_V_0_sel_rd = 1'b0;
#0 in_V_data_V_0_sel_wr = 1'b0;
#0 in_V_data_V_0_state = 2'd0;
#0 in_V_dest_V_0_state = 2'd0;
#0 out_V_data_V_1_sel_rd = 1'b0;
#0 out_V_data_V_1_sel_wr = 1'b0;
#0 out_V_data_V_1_state = 2'd0;
#0 out_V_keep_V_1_sel_rd = 1'b0;
#0 out_V_keep_V_1_state = 2'd0;
#0 out_V_strb_V_1_sel_rd = 1'b0;
#0 out_V_strb_V_1_state = 2'd0;
#0 out_V_user_V_1_sel_rd = 1'b0;
#0 out_V_user_V_1_state = 2'd0;
#0 out_V_last_V_1_sel_rd = 1'b0;
#0 out_V_last_V_1_sel_wr = 1'b0;
#0 out_V_last_V_1_state = 2'd0;
#0 out_V_id_V_1_sel_rd = 1'b0;
#0 out_V_id_V_1_state = 2'd0;
#0 out_V_dest_V_1_sel_rd = 1'b0;
#0 out_V_dest_V_1_state = 2'd0;
end

img_filter_hw_am_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 22 ))
img_filter_hw_am_bkb_U1(
    .din0(grp_fu_597_p0),
    .din1(grp_fu_597_p1),
    .din2(grp_fu_597_p2),
    .dout(grp_fu_597_p3)
);

fifo_w8_d640_A buff1_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(buff1_V_V_din),
    .if_full_n(buff1_V_V_full_n),
    .if_write(buff1_V_V_write),
    .if_dout(buff1_V_V_dout),
    .if_empty_n(buff1_V_V_empty_n),
    .if_read(buff1_V_V_read)
);

fifo_w8_d640_A buff2_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(buff2_V_V_din),
    .if_full_n(buff2_V_V_full_n),
    .if_write(buff2_V_V_write),
    .if_dout(buff2_V_V_dout),
    .if_empty_n(buff2_V_V_empty_n),
    .if_read(buff2_V_V_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_V_data_V_0_ack_out == 1'b1) & (in_V_data_V_0_vld_out == 1'b1))) begin
            in_V_data_V_0_sel_rd <= ~in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_V_data_V_0_ack_in == 1'b1) & (in_V_data_V_0_vld_in == 1'b1))) begin
            in_V_data_V_0_sel_wr <= ~in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_data_V_0_state == 2'd2) & (in_V_data_V_0_vld_in == 1'b0)) | ((in_V_data_V_0_state == 2'd3) & (in_V_data_V_0_vld_in == 1'b0) & (in_V_data_V_0_ack_out == 1'b1)))) begin
            in_V_data_V_0_state <= 2'd2;
        end else if ((((in_V_data_V_0_state == 2'd1) & (in_V_data_V_0_ack_out == 1'b0)) | ((in_V_data_V_0_state == 2'd3) & (in_V_data_V_0_ack_out == 1'b0) & (in_V_data_V_0_vld_in == 1'b1)))) begin
            in_V_data_V_0_state <= 2'd1;
        end else if (((~((in_V_data_V_0_vld_in == 1'b0) & (in_V_data_V_0_ack_out == 1'b1)) & ~((in_V_data_V_0_ack_out == 1'b0) & (in_V_data_V_0_vld_in == 1'b1)) & (in_V_data_V_0_state == 2'd3)) | ((in_V_data_V_0_state == 2'd1) & (in_V_data_V_0_ack_out == 1'b1)) | ((in_V_data_V_0_state == 2'd2) & (in_V_data_V_0_vld_in == 1'b1)))) begin
            in_V_data_V_0_state <= 2'd3;
        end else begin
            in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_dest_V_0_state == 2'd2) & (in_V_dest_V_0_vld_in == 1'b0)) | ((in_V_dest_V_0_state == 2'd3) & (in_V_dest_V_0_vld_in == 1'b0) & (in_V_dest_V_0_ack_out == 1'b1)))) begin
            in_V_dest_V_0_state <= 2'd2;
        end else if ((((in_V_dest_V_0_state == 2'd1) & (in_V_dest_V_0_ack_out == 1'b0)) | ((in_V_dest_V_0_state == 2'd3) & (in_V_dest_V_0_ack_out == 1'b0) & (in_V_dest_V_0_vld_in == 1'b1)))) begin
            in_V_dest_V_0_state <= 2'd1;
        end else if (((~((in_V_dest_V_0_vld_in == 1'b0) & (in_V_dest_V_0_ack_out == 1'b1)) & ~((in_V_dest_V_0_ack_out == 1'b0) & (in_V_dest_V_0_vld_in == 1'b1)) & (in_V_dest_V_0_state == 2'd3)) | ((in_V_dest_V_0_state == 2'd1) & (in_V_dest_V_0_ack_out == 1'b1)) | ((in_V_dest_V_0_state == 2'd2) & (in_V_dest_V_0_vld_in == 1'b1)))) begin
            in_V_dest_V_0_state <= 2'd3;
        end else begin
            in_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_data_V_1_ack_out == 1'b1) & (out_V_data_V_1_vld_out == 1'b1))) begin
            out_V_data_V_1_sel_rd <= ~out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_data_V_1_ack_in == 1'b1) & (out_V_data_V_1_vld_in == 1'b1))) begin
            out_V_data_V_1_sel_wr <= ~out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_data_V_1_state == 2'd2) & (out_V_data_V_1_vld_in == 1'b0)) | ((out_V_data_V_1_state == 2'd3) & (out_V_data_V_1_vld_in == 1'b0) & (out_V_data_V_1_ack_out == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd2;
        end else if ((((out_V_data_V_1_state == 2'd1) & (out_V_data_V_1_ack_out == 1'b0)) | ((out_V_data_V_1_state == 2'd3) & (out_V_data_V_1_ack_out == 1'b0) & (out_V_data_V_1_vld_in == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd1;
        end else if (((~((out_V_data_V_1_vld_in == 1'b0) & (out_V_data_V_1_ack_out == 1'b1)) & ~((out_V_data_V_1_ack_out == 1'b0) & (out_V_data_V_1_vld_in == 1'b1)) & (out_V_data_V_1_state == 2'd3)) | ((out_V_data_V_1_state == 2'd1) & (out_V_data_V_1_ack_out == 1'b1)) | ((out_V_data_V_1_state == 2'd2) & (out_V_data_V_1_vld_in == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd3;
        end else begin
            out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_dest_V_1_ack_out == 1'b1) & (out_V_dest_V_1_vld_out == 1'b1))) begin
            out_V_dest_V_1_sel_rd <= ~out_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_dest_V_1_state == 2'd2) & (out_V_dest_V_1_vld_in == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_V_dest_V_1_vld_in == 1'b0) & (out_V_dest_V_1_ack_out == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd2;
        end else if ((((out_V_dest_V_1_state == 2'd1) & (out_V_dest_V_1_ack_out == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_V_dest_V_1_ack_out == 1'b0) & (out_V_dest_V_1_vld_in == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd1;
        end else if (((~((out_V_dest_V_1_vld_in == 1'b0) & (out_V_dest_V_1_ack_out == 1'b1)) & ~((out_V_dest_V_1_ack_out == 1'b0) & (out_V_dest_V_1_vld_in == 1'b1)) & (out_V_dest_V_1_state == 2'd3)) | ((out_V_dest_V_1_state == 2'd1) & (out_V_dest_V_1_ack_out == 1'b1)) | ((out_V_dest_V_1_state == 2'd2) & (out_V_dest_V_1_vld_in == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd3;
        end else begin
            out_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_id_V_1_ack_out == 1'b1) & (out_V_id_V_1_vld_out == 1'b1))) begin
            out_V_id_V_1_sel_rd <= ~out_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_id_V_1_state == 2'd2) & (out_V_id_V_1_vld_in == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_V_id_V_1_vld_in == 1'b0) & (out_V_id_V_1_ack_out == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd2;
        end else if ((((out_V_id_V_1_state == 2'd1) & (out_V_id_V_1_ack_out == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_V_id_V_1_ack_out == 1'b0) & (out_V_id_V_1_vld_in == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd1;
        end else if (((~((out_V_id_V_1_vld_in == 1'b0) & (out_V_id_V_1_ack_out == 1'b1)) & ~((out_V_id_V_1_ack_out == 1'b0) & (out_V_id_V_1_vld_in == 1'b1)) & (out_V_id_V_1_state == 2'd3)) | ((out_V_id_V_1_state == 2'd1) & (out_V_id_V_1_ack_out == 1'b1)) | ((out_V_id_V_1_state == 2'd2) & (out_V_id_V_1_vld_in == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd3;
        end else begin
            out_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_keep_V_1_ack_out == 1'b1) & (out_V_keep_V_1_vld_out == 1'b1))) begin
            out_V_keep_V_1_sel_rd <= ~out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_keep_V_1_state == 2'd2) & (out_V_keep_V_1_vld_in == 1'b0)) | ((out_V_keep_V_1_state == 2'd3) & (out_V_keep_V_1_vld_in == 1'b0) & (out_V_keep_V_1_ack_out == 1'b1)))) begin
            out_V_keep_V_1_state <= 2'd2;
        end else if ((((out_V_keep_V_1_state == 2'd1) & (out_V_keep_V_1_ack_out == 1'b0)) | ((out_V_keep_V_1_state == 2'd3) & (out_V_keep_V_1_ack_out == 1'b0) & (out_V_keep_V_1_vld_in == 1'b1)))) begin
            out_V_keep_V_1_state <= 2'd1;
        end else if (((~((out_V_keep_V_1_vld_in == 1'b0) & (out_V_keep_V_1_ack_out == 1'b1)) & ~((out_V_keep_V_1_ack_out == 1'b0) & (out_V_keep_V_1_vld_in == 1'b1)) & (out_V_keep_V_1_state == 2'd3)) | ((out_V_keep_V_1_state == 2'd1) & (out_V_keep_V_1_ack_out == 1'b1)) | ((out_V_keep_V_1_state == 2'd2) & (out_V_keep_V_1_vld_in == 1'b1)))) begin
            out_V_keep_V_1_state <= 2'd3;
        end else begin
            out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_last_V_1_ack_out == 1'b1) & (out_V_last_V_1_vld_out == 1'b1))) begin
            out_V_last_V_1_sel_rd <= ~out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_last_V_1_ack_in == 1'b1) & (out_V_last_V_1_vld_in == 1'b1))) begin
            out_V_last_V_1_sel_wr <= ~out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_last_V_1_state == 2'd2) & (out_V_last_V_1_vld_in == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_V_last_V_1_vld_in == 1'b0) & (out_V_last_V_1_ack_out == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd2;
        end else if ((((out_V_last_V_1_state == 2'd1) & (out_V_last_V_1_ack_out == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_V_last_V_1_ack_out == 1'b0) & (out_V_last_V_1_vld_in == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd1;
        end else if (((~((out_V_last_V_1_vld_in == 1'b0) & (out_V_last_V_1_ack_out == 1'b1)) & ~((out_V_last_V_1_ack_out == 1'b0) & (out_V_last_V_1_vld_in == 1'b1)) & (out_V_last_V_1_state == 2'd3)) | ((out_V_last_V_1_state == 2'd1) & (out_V_last_V_1_ack_out == 1'b1)) | ((out_V_last_V_1_state == 2'd2) & (out_V_last_V_1_vld_in == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd3;
        end else begin
            out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_strb_V_1_ack_out == 1'b1) & (out_V_strb_V_1_vld_out == 1'b1))) begin
            out_V_strb_V_1_sel_rd <= ~out_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_strb_V_1_state == 2'd2) & (out_V_strb_V_1_vld_in == 1'b0)) | ((out_V_strb_V_1_state == 2'd3) & (out_V_strb_V_1_vld_in == 1'b0) & (out_V_strb_V_1_ack_out == 1'b1)))) begin
            out_V_strb_V_1_state <= 2'd2;
        end else if ((((out_V_strb_V_1_state == 2'd1) & (out_V_strb_V_1_ack_out == 1'b0)) | ((out_V_strb_V_1_state == 2'd3) & (out_V_strb_V_1_ack_out == 1'b0) & (out_V_strb_V_1_vld_in == 1'b1)))) begin
            out_V_strb_V_1_state <= 2'd1;
        end else if (((~((out_V_strb_V_1_vld_in == 1'b0) & (out_V_strb_V_1_ack_out == 1'b1)) & ~((out_V_strb_V_1_ack_out == 1'b0) & (out_V_strb_V_1_vld_in == 1'b1)) & (out_V_strb_V_1_state == 2'd3)) | ((out_V_strb_V_1_state == 2'd1) & (out_V_strb_V_1_ack_out == 1'b1)) | ((out_V_strb_V_1_state == 2'd2) & (out_V_strb_V_1_vld_in == 1'b1)))) begin
            out_V_strb_V_1_state <= 2'd3;
        end else begin
            out_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_user_V_1_ack_out == 1'b1) & (out_V_user_V_1_vld_out == 1'b1))) begin
            out_V_user_V_1_sel_rd <= ~out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_user_V_1_state == 2'd2) & (out_V_user_V_1_vld_in == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_V_user_V_1_vld_in == 1'b0) & (out_V_user_V_1_ack_out == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd2;
        end else if ((((out_V_user_V_1_state == 2'd1) & (out_V_user_V_1_ack_out == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_V_user_V_1_ack_out == 1'b0) & (out_V_user_V_1_vld_in == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd1;
        end else if (((~((out_V_user_V_1_vld_in == 1'b0) & (out_V_user_V_1_ack_out == 1'b1)) & ~((out_V_user_V_1_ack_out == 1'b0) & (out_V_user_V_1_vld_in == 1'b1)) & (out_V_user_V_1_state == 2'd3)) | ((out_V_user_V_1_state == 2'd1) & (out_V_user_V_1_ack_out == 1'b1)) | ((out_V_user_V_1_state == 2'd2) & (out_V_user_V_1_vld_in == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd3;
        end else begin
            out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        col_1_reg_304 <= col_3_reg_690;
    end else if ((~((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0)) & (tmp_5_fu_327_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        col_1_reg_304 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        col_reg_282 <= 10'd0;
    end else if ((~(((tmp_fu_315_p2 == 1'd1) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_fu_315_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        col_reg_282 <= col_2_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state4_io) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_7_fu_360_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        row_reg_293 <= row_1_reg_677;
    end else if ((~(((tmp_fu_315_p2 == 1'd1) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_fu_315_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        row_reg_293 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state4_io) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state4))) begin
        col_3_reg_690 <= col_3_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_data_V_0_load_A == 1'b1)) begin
        in_V_data_V_0_payload_A <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_data_V_0_load_B == 1'b1)) begin
        in_V_data_V_0_payload_B <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_data_V_1_load_A == 1'b1)) begin
        out_V_data_V_1_payload_A <= tmp_data_V_fu_534_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_data_V_1_load_B == 1'b1)) begin
        out_V_data_V_1_payload_B <= tmp_data_V_fu_534_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_last_V_1_load_A == 1'b1)) begin
        out_V_last_V_1_payload_A <= tmp_last_V_fu_551_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_last_V_1_load_B == 1'b1)) begin
        out_V_last_V_1_payload_B <= tmp_last_V_fu_551_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        row_1_reg_677 <= row_1_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state4_io) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_7_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        swin_0_1_V_1_fu_182 <= buff1_V_V_dout;
        swin_0_1_V_fu_178 <= swin_0_1_V_1_fu_182;
        swin_1_0_V_fu_190 <= swin_1_1_V_fu_194;
        swin_1_1_V_fu_194 <= buff2_V_V_dout;
        swin_2_0_V_fu_202 <= swin_2_1_V_fu_206;
        swin_2_1_V_fu_206 <= {{grp_fu_597_p3[19:12]}};
        tmp_V_1_fu_198 <= swin_2_0_V_fu_202;
        tmp_V_fu_186 <= swin_1_0_V_fu_190;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0)) & (tmp_5_fu_327_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_6_reg_682 <= tmp_6_fu_339_p2;
    end
end

always @ (*) begin
    if ((~((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0)) & (tmp_5_fu_327_p2 == 1'd1) & (out_V_dest_V_1_state[1'd0] == 1'b0) & (out_V_id_V_1_state[1'd0] == 1'b0) & (out_V_last_V_1_state[1'd0] == 1'b0) & (out_V_user_V_1_state[1'd0] == 1'b0) & (out_V_strb_V_1_state[1'd0] == 1'b0) & (out_V_keep_V_1_state[1'd0] == 1'b0) & (out_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0)) & (tmp_5_fu_327_p2 == 1'd1) & (out_V_dest_V_1_state[1'd0] == 1'b0) & (out_V_id_V_1_state[1'd0] == 1'b0) & (out_V_last_V_1_state[1'd0] == 1'b0) & (out_V_user_V_1_state[1'd0] == 1'b0) & (out_V_strb_V_1_state[1'd0] == 1'b0) & (out_V_keep_V_1_state[1'd0] == 1'b0) & (out_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~(((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_7_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        buff1_V_V_din = tmp_V_fu_186;
    end else if ((~(((tmp_fu_315_p2 == 1'd1) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_fu_315_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        buff1_V_V_din = 8'd0;
    end else begin
        buff1_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state4_io) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_7_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        buff1_V_V_read = 1'b1;
    end else begin
        buff1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((~(((tmp_fu_315_p2 == 1'd1) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_fu_315_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | (~((1'b1 == ap_block_state4_io) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_7_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        buff1_V_V_write = 1'b1;
    end else begin
        buff1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~(((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_7_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        buff2_V_V_din = tmp_V_1_fu_198;
    end else if (((~(((tmp_fu_315_p2 == 1'd1) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_fu_315_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | (~(((tmp_fu_315_p2 == 1'd1) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_fu_315_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        buff2_V_V_din = 8'd0;
    end else begin
        buff2_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state4_io) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_7_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        buff2_V_V_read = 1'b1;
    end else begin
        buff2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((~(((tmp_fu_315_p2 == 1'd1) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_fu_315_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | (~(((tmp_fu_315_p2 == 1'd1) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_fu_315_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | (~((1'b1 == ap_block_state4_io) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_7_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        buff2_V_V_write = 1'b1;
    end else begin
        buff2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state4_io) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_7_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        in_V_data_V_0_ack_out = 1'b1;
    end else begin
        in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_V_data_V_0_sel == 1'b1)) begin
        in_V_data_V_0_data_out = in_V_data_V_0_payload_B;
    end else begin
        in_V_data_V_0_data_out = in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state4_io) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_7_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        in_V_dest_V_0_ack_out = 1'b1;
    end else begin
        in_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_7_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        in_r_TDATA_blk_n = in_V_data_V_0_state[1'd0];
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_V_data_V_1_sel == 1'b1)) begin
        out_V_data_V_1_data_out = out_V_data_V_1_payload_B;
    end else begin
        out_V_data_V_1_data_out = out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state4_io) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_7_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        out_V_data_V_1_vld_in = 1'b1;
    end else begin
        out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state4_io) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_7_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        out_V_dest_V_1_vld_in = 1'b1;
    end else begin
        out_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state4_io) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_7_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        out_V_id_V_1_vld_in = 1'b1;
    end else begin
        out_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state4_io) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_7_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_V_last_V_1_sel == 1'b1)) begin
        out_V_last_V_1_data_out = out_V_last_V_1_payload_B;
    end else begin
        out_V_last_V_1_data_out = out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state4_io) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_7_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        out_V_last_V_1_vld_in = 1'b1;
    end else begin
        out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state4_io) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_7_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        out_V_strb_V_1_vld_in = 1'b1;
    end else begin
        out_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state4_io) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_7_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        out_V_user_V_1_vld_in = 1'b1;
    end else begin
        out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((tmp_7_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        out_r_TDATA_blk_n = out_V_data_V_1_state[1'd1];
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((tmp_fu_315_p2 == 1'd1) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_fu_315_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~(((tmp_fu_315_p2 == 1'd1) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_fu_315_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0)) & (tmp_5_fu_327_p2 == 1'd1) & (out_V_dest_V_1_state[1'd0] == 1'b0) & (out_V_id_V_1_state[1'd0] == 1'b0) & (out_V_last_V_1_state[1'd0] == 1'b0) & (out_V_user_V_1_state[1'd0] == 1'b0) & (out_V_strb_V_1_state[1'd0] == 1'b0) & (out_V_keep_V_1_state[1'd0] == 1'b0) & (out_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0)) & (tmp_5_fu_327_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((1'b1 == ap_block_state4_io) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_7_fu_360_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((1'b1 == ap_block_state4_io) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0))) & (tmp_7_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state2 = (((tmp_fu_315_p2 == 1'd1) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_fu_315_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state3 = ((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state4 = (((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_empty_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff2_V_V_full_n == 1'b0)) | ((tmp_7_fu_360_p2 == 1'd0) & (buff1_V_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4_io = ((tmp_7_fu_360_p2 == 1'd0) & (out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign col_2_fu_321_p2 = (col_reg_282 + 10'd1);

assign col_3_fu_366_p2 = (col_1_reg_304 + 10'd1);

assign grp_fu_597_p0 = grp_fu_597_p00;

assign grp_fu_597_p00 = ret_V_fu_415_p2;

assign grp_fu_597_p1 = grp_fu_597_p10;

assign grp_fu_597_p10 = tmp_1_fu_421_p1;

assign grp_fu_597_p2 = 22'd1366;

assign icmp_fu_516_p2 = ((tmp_9_fu_506_p4 == 2'd1) ? 1'b1 : 1'b0);

assign in_V_data_V_0_ack_in = in_V_data_V_0_state[1'd1];

assign in_V_data_V_0_load_A = (in_V_data_V_0_state_cmp_full & ~in_V_data_V_0_sel_wr);

assign in_V_data_V_0_load_B = (in_V_data_V_0_state_cmp_full & in_V_data_V_0_sel_wr);

assign in_V_data_V_0_sel = in_V_data_V_0_sel_rd;

assign in_V_data_V_0_state_cmp_full = ((in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_data_V_0_vld_in = in_r_TVALID;

assign in_V_data_V_0_vld_out = in_V_data_V_0_state[1'd0];

assign in_V_dest_V_0_vld_in = in_r_TVALID;

assign in_r_TREADY = in_V_dest_V_0_state[1'd1];

assign lhs_V_2_cast_fu_442_p1 = buff1_V_V_dout;

assign lhs_V_3_cast_fu_446_p1 = swin_0_1_V_fu_178;

assign lhs_V_4_cast_fu_456_p1 = swin_2_0_V_fu_202;

assign lhs_V_5_cast_fu_466_p1 = $signed(ret_V_2_fu_450_p2);

assign lhs_V_cast_fu_407_p1 = p_Result_s_fu_387_p4;

assign out_V_data_V_1_ack_in = out_V_data_V_1_state[1'd1];

assign out_V_data_V_1_ack_out = out_r_TREADY;

assign out_V_data_V_1_load_A = (out_V_data_V_1_state_cmp_full & ~out_V_data_V_1_sel_wr);

assign out_V_data_V_1_load_B = (out_V_data_V_1_state_cmp_full & out_V_data_V_1_sel_wr);

assign out_V_data_V_1_sel = out_V_data_V_1_sel_rd;

assign out_V_data_V_1_state_cmp_full = ((out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_data_V_1_vld_out = out_V_data_V_1_state[1'd0];

assign out_V_dest_V_1_ack_in = out_V_dest_V_1_state[1'd1];

assign out_V_dest_V_1_ack_out = out_r_TREADY;

assign out_V_dest_V_1_data_out = 1'd1;

assign out_V_dest_V_1_sel = out_V_dest_V_1_sel_rd;

assign out_V_dest_V_1_vld_out = out_V_dest_V_1_state[1'd0];

assign out_V_id_V_1_ack_in = out_V_id_V_1_state[1'd1];

assign out_V_id_V_1_ack_out = out_r_TREADY;

assign out_V_id_V_1_data_out = 1'd1;

assign out_V_id_V_1_sel = out_V_id_V_1_sel_rd;

assign out_V_id_V_1_vld_out = out_V_id_V_1_state[1'd0];

assign out_V_keep_V_1_ack_in = out_V_keep_V_1_state[1'd1];

assign out_V_keep_V_1_ack_out = out_r_TREADY;

assign out_V_keep_V_1_data_out = 3'd7;

assign out_V_keep_V_1_sel = out_V_keep_V_1_sel_rd;

assign out_V_keep_V_1_vld_out = out_V_keep_V_1_state[1'd0];

assign out_V_last_V_1_ack_in = out_V_last_V_1_state[1'd1];

assign out_V_last_V_1_ack_out = out_r_TREADY;

assign out_V_last_V_1_load_A = (out_V_last_V_1_state_cmp_full & ~out_V_last_V_1_sel_wr);

assign out_V_last_V_1_load_B = (out_V_last_V_1_state_cmp_full & out_V_last_V_1_sel_wr);

assign out_V_last_V_1_sel = out_V_last_V_1_sel_rd;

assign out_V_last_V_1_state_cmp_full = ((out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_last_V_1_vld_out = out_V_last_V_1_state[1'd0];

assign out_V_strb_V_1_ack_in = out_V_strb_V_1_state[1'd1];

assign out_V_strb_V_1_ack_out = out_r_TREADY;

assign out_V_strb_V_1_data_out = 3'd7;

assign out_V_strb_V_1_sel = out_V_strb_V_1_sel_rd;

assign out_V_strb_V_1_vld_out = out_V_strb_V_1_state[1'd0];

assign out_V_user_V_1_ack_in = out_V_user_V_1_state[1'd1];

assign out_V_user_V_1_ack_out = out_r_TREADY;

assign out_V_user_V_1_data_out = 1'd1;

assign out_V_user_V_1_sel = out_V_user_V_1_sel_rd;

assign out_V_user_V_1_vld_out = out_V_user_V_1_state[1'd0];

assign out_r_TDATA = out_V_data_V_1_data_out;

assign out_r_TDEST = out_V_dest_V_1_data_out;

assign out_r_TID = out_V_id_V_1_data_out;

assign out_r_TKEEP = out_V_keep_V_1_data_out;

assign out_r_TLAST = out_V_last_V_1_data_out;

assign out_r_TSTRB = out_V_strb_V_1_data_out;

assign out_r_TUSER = out_V_user_V_1_data_out;

assign out_r_TVALID = out_V_dest_V_1_state[1'd0];

assign p_Result_1_fu_397_p4 = {{in_V_data_V_0_data_out[15:8]}};

assign p_Result_s_fu_387_p4 = {{in_V_data_V_0_data_out[23:16]}};

assign p_s_fu_498_p3 = ((tmp_4_fu_490_p3[0:0] === 1'b1) ? 10'd0 : ret_V_5_fu_484_p2);

assign ret_V_2_fu_450_p2 = (lhs_V_3_cast_fu_446_p1 - lhs_V_2_cast_fu_442_p1);

assign ret_V_3_fu_460_p2 = (9'd0 - lhs_V_4_cast_fu_456_p1);

assign ret_V_4_fu_474_p2 = ($signed(lhs_V_5_cast_fu_466_p1) + $signed(rhs_V_3_cast_fu_470_p1));

assign ret_V_5_fu_484_p2 = (ret_V_4_fu_474_p2 + rhs_V_4_cast_fu_480_p1);

assign ret_V_fu_415_p2 = (rhs_V_cast_fu_411_p1 + lhs_V_cast_fu_407_p1);

assign rhs_V_3_cast_fu_470_p1 = $signed(ret_V_3_fu_460_p2);

assign rhs_V_4_cast_fu_480_p1 = swin_2_2_V_fu_433_p4;

assign rhs_V_cast_fu_411_p1 = p_Result_1_fu_397_p4;

assign row_1_fu_333_p2 = (row_reg_293 + 9'd1);

assign swin_2_2_V_fu_433_p4 = {{grp_fu_597_p3[19:12]}};

assign tmp_10_fu_522_p1 = p_s_fu_498_p3[7:0];

assign tmp_1_fu_421_p1 = in_V_data_V_0_data_out[7:0];

assign tmp_3_fu_545_p2 = ((col_1_reg_304 == 10'd639) ? 1'b1 : 1'b0);

assign tmp_4_fu_490_p3 = ret_V_5_fu_484_p2[32'd9];

assign tmp_5_fu_327_p2 = ((row_reg_293 == 9'd480) ? 1'b1 : 1'b0);

assign tmp_6_fu_339_p2 = ((row_reg_293 == 9'd479) ? 1'b1 : 1'b0);

assign tmp_7_fu_360_p2 = ((col_1_reg_304 == 10'd640) ? 1'b1 : 1'b0);

assign tmp_8_fu_526_p3 = ((icmp_fu_516_p2[0:0] === 1'b1) ? 8'd255 : tmp_10_fu_522_p1);

assign tmp_9_fu_506_p4 = {{p_s_fu_498_p3[9:8]}};

assign tmp_data_V_fu_534_p4 = {{{tmp_8_fu_526_p3}, {tmp_8_fu_526_p3}}, {tmp_8_fu_526_p3}};

assign tmp_fu_315_p2 = ((col_reg_282 == 10'd637) ? 1'b1 : 1'b0);

assign tmp_last_V_fu_551_p2 = (tmp_6_reg_682 & tmp_3_fu_545_p2);

endmodule //img_filter_hw
