-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity img_filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    in_r_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    in_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of img_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "img_filter,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.105000,HLS_SYN_LAT=8603522,HLS_SYN_TPT=none,HLS_SYN_MEM=150,HLS_SYN_DSP=3,HLS_SYN_FF=299,HLS_SYN_LUT=816,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv9_1DF : STD_LOGIC_VECTOR (8 downto 0) := "111011111";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv8_C8 : STD_LOGIC_VECTOR (7 downto 0) := "11001000";
    constant ap_const_lv8_64 : STD_LOGIC_VECTOR (7 downto 0) := "01100100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv10_27F : STD_LOGIC_VECTOR (9 downto 0) := "1001111111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv22_556 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010101010110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_V_data_V_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal in_V_data_V_0_vld_in : STD_LOGIC;
    signal in_V_data_V_0_vld_out : STD_LOGIC;
    signal in_V_data_V_0_ack_in : STD_LOGIC;
    signal in_V_data_V_0_ack_out : STD_LOGIC;
    signal in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal in_V_data_V_0_sel : STD_LOGIC;
    signal in_V_data_V_0_load_A : STD_LOGIC;
    signal in_V_data_V_0_load_B : STD_LOGIC;
    signal in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal in_V_dest_V_0_vld_in : STD_LOGIC;
    signal in_V_dest_V_0_ack_out : STD_LOGIC;
    signal in_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_data_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal out_V_data_V_1_vld_in : STD_LOGIC;
    signal out_V_data_V_1_vld_out : STD_LOGIC;
    signal out_V_data_V_1_ack_in : STD_LOGIC;
    signal out_V_data_V_1_ack_out : STD_LOGIC;
    signal out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal out_V_data_V_1_sel : STD_LOGIC;
    signal out_V_data_V_1_load_A : STD_LOGIC;
    signal out_V_data_V_1_load_B : STD_LOGIC;
    signal out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal out_V_keep_V_1_data_out : STD_LOGIC_VECTOR (2 downto 0);
    signal out_V_keep_V_1_vld_in : STD_LOGIC;
    signal out_V_keep_V_1_vld_out : STD_LOGIC;
    signal out_V_keep_V_1_ack_in : STD_LOGIC;
    signal out_V_keep_V_1_ack_out : STD_LOGIC;
    signal out_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_keep_V_1_sel : STD_LOGIC;
    signal out_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_strb_V_1_data_out : STD_LOGIC_VECTOR (2 downto 0);
    signal out_V_strb_V_1_vld_in : STD_LOGIC;
    signal out_V_strb_V_1_vld_out : STD_LOGIC;
    signal out_V_strb_V_1_ack_in : STD_LOGIC;
    signal out_V_strb_V_1_ack_out : STD_LOGIC;
    signal out_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_strb_V_1_sel : STD_LOGIC;
    signal out_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_user_V_1_vld_in : STD_LOGIC;
    signal out_V_user_V_1_vld_out : STD_LOGIC;
    signal out_V_user_V_1_ack_in : STD_LOGIC;
    signal out_V_user_V_1_ack_out : STD_LOGIC;
    signal out_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_user_V_1_sel : STD_LOGIC;
    signal out_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_last_V_1_vld_in : STD_LOGIC;
    signal out_V_last_V_1_vld_out : STD_LOGIC;
    signal out_V_last_V_1_ack_in : STD_LOGIC;
    signal out_V_last_V_1_ack_out : STD_LOGIC;
    signal out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_V_last_V_1_sel : STD_LOGIC;
    signal out_V_last_V_1_load_A : STD_LOGIC;
    signal out_V_last_V_1_load_B : STD_LOGIC;
    signal out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal out_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_id_V_1_vld_in : STD_LOGIC;
    signal out_V_id_V_1_vld_out : STD_LOGIC;
    signal out_V_id_V_1_ack_in : STD_LOGIC;
    signal out_V_id_V_1_ack_out : STD_LOGIC;
    signal out_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_id_V_1_sel : STD_LOGIC;
    signal out_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_dest_V_1_vld_in : STD_LOGIC;
    signal out_V_dest_V_1_vld_out : STD_LOGIC;
    signal out_V_dest_V_1_ack_in : STD_LOGIC;
    signal out_V_dest_V_1_ack_out : STD_LOGIC;
    signal out_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_dest_V_1_sel : STD_LOGIC;
    signal out_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal kernelX_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernelX_ce0 : STD_LOGIC;
    signal kernelX_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal kernelY_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernelY_ce0 : STD_LOGIC;
    signal kernelY_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond3_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal row_2_fu_353_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal row_2_reg_755 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_383_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_s_reg_760 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_2_fu_395_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal row_3_fu_481_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal row_3_reg_776 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4 : BOOLEAN;
    signal tmp_4_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_781 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_cast_fu_493_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_cast_reg_786 : STD_LOGIC_VECTOR (9 downto 0);
    signal col_3_fu_503_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal col_3_reg_794 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_7_cast_fu_509_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_cast_reg_799 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_556_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_20_reg_807 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_state6_io : BOOLEAN;
    signal tmp_22_fu_584_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_reg_812 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_3_fu_630_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_last_V_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_707_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_845 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_fu_713_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_736_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_744_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_V_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal img_V_ce0 : STD_LOGIC;
    signal img_V_we0 : STD_LOGIC;
    signal img_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_reg_231 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_reg_242 : STD_LOGIC_VECTOR (9 downto 0);
    signal row_1_reg_253 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_1_reg_264 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_1_reg_276 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_2_reg_288 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_300 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_0230_1_reg_312 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0218_1_reg_324 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_336 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_19_cast_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_cast_fu_681_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_cast_fu_701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_359_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_6_fu_371_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl1_cast_fu_379_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl_cast_fu_367_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_s_fu_405_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_fu_415_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_cast_fu_425_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_cast_fu_429_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_fu_433_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_439_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_727_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_cast_fu_461_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_13_fu_465_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_8_cast_fu_523_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_527_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_fu_532_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_19_fu_544_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl3_cast_fu_540_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl4_cast_fu_552_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_15_fu_519_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_fu_562_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_21_fu_572_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_cast_fu_580_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_cast_fu_568_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal edge_w_V_fu_590_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_608_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal v2_V_fu_622_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_cast_fu_663_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_fu_667_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_cast_fu_672_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_24_fu_676_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_23_fu_659_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_fu_686_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_cast_fu_692_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_25_fu_696_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_727_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_727_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_727_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_727_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_727_p10 : STD_LOGIC_VECTOR (9 downto 0);

    component img_filter_am_addbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component img_filter_mac_mucud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component img_filter_mac_mudEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component img_filter_kernelX IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component img_filter_kernelY IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component img_filter_img_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    kernelX_U : component img_filter_kernelX
    generic map (
        DataWidth => 3,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => kernelX_address0,
        ce0 => kernelX_ce0,
        q0 => kernelX_q0);

    kernelY_U : component img_filter_kernelY
    generic map (
        DataWidth => 3,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => kernelY_address0,
        ce0 => kernelY_ce0,
        q0 => kernelY_q0);

    img_V_U : component img_filter_img_V
    generic map (
        DataWidth => 8,
        AddressRange => 307200,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => img_V_address0,
        ce0 => img_V_ce0,
        we0 => img_V_we0,
        d0 => img_V_d0,
        q0 => img_V_q0);

    img_filter_am_addbkb_U1 : component img_filter_am_addbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_727_p0,
        din1 => grp_fu_727_p1,
        din2 => grp_fu_727_p2,
        dout => grp_fu_727_p3);

    img_filter_mac_mucud_U2 : component img_filter_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 3,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => img_V_q0,
        din1 => kernelX_q0,
        din2 => p_0230_1_reg_312,
        dout => grp_fu_736_p3);

    img_filter_mac_mudEe_U3 : component img_filter_mac_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => kernelY_q0,
        din1 => img_V_q0,
        din2 => p_0218_1_reg_324,
        dout => grp_fu_744_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_V_data_V_0_ack_out = ap_const_logic_1) and (in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        in_V_data_V_0_sel_rd <= not(in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_V_data_V_0_ack_in = ap_const_logic_1) and (in_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        in_V_data_V_0_sel_wr <= not(in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_V_data_V_0_state = ap_const_lv2_2) and (in_V_data_V_0_vld_in = ap_const_logic_0)) or ((in_V_data_V_0_state = ap_const_lv2_3) and (in_V_data_V_0_vld_in = ap_const_logic_0) and (in_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((in_V_data_V_0_state = ap_const_lv2_1) and (in_V_data_V_0_ack_out = ap_const_logic_0)) or ((in_V_data_V_0_state = ap_const_lv2_3) and (in_V_data_V_0_ack_out = ap_const_logic_0) and (in_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_V_data_V_0_vld_in = ap_const_logic_0) and (in_V_data_V_0_ack_out = ap_const_logic_1))) and not(((in_V_data_V_0_ack_out = ap_const_logic_0) and (in_V_data_V_0_vld_in = ap_const_logic_1))) and (in_V_data_V_0_state = ap_const_lv2_3)) or ((in_V_data_V_0_state = ap_const_lv2_1) and (in_V_data_V_0_ack_out = ap_const_logic_1)) or ((in_V_data_V_0_state = ap_const_lv2_2) and (in_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_V_dest_V_0_state = ap_const_lv2_2) and (in_V_dest_V_0_vld_in = ap_const_logic_0)) or ((in_V_dest_V_0_state = ap_const_lv2_3) and (in_V_dest_V_0_vld_in = ap_const_logic_0) and (in_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    in_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((in_V_dest_V_0_state = ap_const_lv2_1) and (in_V_dest_V_0_ack_out = ap_const_logic_0)) or ((in_V_dest_V_0_state = ap_const_lv2_3) and (in_V_dest_V_0_ack_out = ap_const_logic_0) and (in_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_V_dest_V_0_vld_in = ap_const_logic_0) and (in_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((in_V_dest_V_0_ack_out = ap_const_logic_0) and (in_V_dest_V_0_vld_in = ap_const_logic_1))) and (in_V_dest_V_0_state = ap_const_lv2_3)) or ((in_V_dest_V_0_state = ap_const_lv2_1) and (in_V_dest_V_0_ack_out = ap_const_logic_1)) or ((in_V_dest_V_0_state = ap_const_lv2_2) and (in_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    in_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_V_data_V_1_ack_out = ap_const_logic_1) and (out_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        out_V_data_V_1_sel_rd <= not(out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_V_data_V_1_ack_in = ap_const_logic_1) and (out_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        out_V_data_V_1_sel_wr <= not(out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_V_data_V_1_state = ap_const_lv2_2) and (out_V_data_V_1_vld_in = ap_const_logic_0)) or ((out_V_data_V_1_state = ap_const_lv2_3) and (out_V_data_V_1_vld_in = ap_const_logic_0) and (out_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((out_V_data_V_1_state = ap_const_lv2_1) and (out_V_data_V_1_ack_out = ap_const_logic_0)) or ((out_V_data_V_1_state = ap_const_lv2_3) and (out_V_data_V_1_ack_out = ap_const_logic_0) and (out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_V_data_V_1_vld_in = ap_const_logic_0) and (out_V_data_V_1_ack_out = ap_const_logic_1))) and not(((out_V_data_V_1_ack_out = ap_const_logic_0) and (out_V_data_V_1_vld_in = ap_const_logic_1))) and (out_V_data_V_1_state = ap_const_lv2_3)) or ((out_V_data_V_1_state = ap_const_lv2_1) and (out_V_data_V_1_ack_out = ap_const_logic_1)) or ((out_V_data_V_1_state = ap_const_lv2_2) and (out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_V_dest_V_1_ack_out = ap_const_logic_1) and (out_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        out_V_dest_V_1_sel_rd <= not(out_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_V_dest_V_1_state = ap_const_lv2_2) and (out_V_dest_V_1_vld_in = ap_const_logic_0)) or ((out_V_dest_V_1_state = ap_const_lv2_3) and (out_V_dest_V_1_vld_in = ap_const_logic_0) and (out_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    out_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((out_V_dest_V_1_state = ap_const_lv2_1) and (out_V_dest_V_1_ack_out = ap_const_logic_0)) or ((out_V_dest_V_1_state = ap_const_lv2_3) and (out_V_dest_V_1_ack_out = ap_const_logic_0) and (out_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_V_dest_V_1_vld_in = ap_const_logic_0) and (out_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((out_V_dest_V_1_ack_out = ap_const_logic_0) and (out_V_dest_V_1_vld_in = ap_const_logic_1))) and (out_V_dest_V_1_state = ap_const_lv2_3)) or ((out_V_dest_V_1_state = ap_const_lv2_1) and (out_V_dest_V_1_ack_out = ap_const_logic_1)) or ((out_V_dest_V_1_state = ap_const_lv2_2) and (out_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_V_id_V_1_ack_out = ap_const_logic_1) and (out_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        out_V_id_V_1_sel_rd <= not(out_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_V_id_V_1_state = ap_const_lv2_2) and (out_V_id_V_1_vld_in = ap_const_logic_0)) or ((out_V_id_V_1_state = ap_const_lv2_3) and (out_V_id_V_1_vld_in = ap_const_logic_0) and (out_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    out_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((out_V_id_V_1_state = ap_const_lv2_1) and (out_V_id_V_1_ack_out = ap_const_logic_0)) or ((out_V_id_V_1_state = ap_const_lv2_3) and (out_V_id_V_1_ack_out = ap_const_logic_0) and (out_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_V_id_V_1_vld_in = ap_const_logic_0) and (out_V_id_V_1_ack_out = ap_const_logic_1))) and not(((out_V_id_V_1_ack_out = ap_const_logic_0) and (out_V_id_V_1_vld_in = ap_const_logic_1))) and (out_V_id_V_1_state = ap_const_lv2_3)) or ((out_V_id_V_1_state = ap_const_lv2_1) and (out_V_id_V_1_ack_out = ap_const_logic_1)) or ((out_V_id_V_1_state = ap_const_lv2_2) and (out_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_V_keep_V_1_ack_out = ap_const_logic_1) and (out_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        out_V_keep_V_1_sel_rd <= not(out_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_V_keep_V_1_state = ap_const_lv2_2) and (out_V_keep_V_1_vld_in = ap_const_logic_0)) or ((out_V_keep_V_1_state = ap_const_lv2_3) and (out_V_keep_V_1_vld_in = ap_const_logic_0) and (out_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    out_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((out_V_keep_V_1_state = ap_const_lv2_1) and (out_V_keep_V_1_ack_out = ap_const_logic_0)) or ((out_V_keep_V_1_state = ap_const_lv2_3) and (out_V_keep_V_1_ack_out = ap_const_logic_0) and (out_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_V_keep_V_1_vld_in = ap_const_logic_0) and (out_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((out_V_keep_V_1_ack_out = ap_const_logic_0) and (out_V_keep_V_1_vld_in = ap_const_logic_1))) and (out_V_keep_V_1_state = ap_const_lv2_3)) or ((out_V_keep_V_1_state = ap_const_lv2_1) and (out_V_keep_V_1_ack_out = ap_const_logic_1)) or ((out_V_keep_V_1_state = ap_const_lv2_2) and (out_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_V_last_V_1_ack_out = ap_const_logic_1) and (out_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        out_V_last_V_1_sel_rd <= not(out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_V_last_V_1_ack_in = ap_const_logic_1) and (out_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        out_V_last_V_1_sel_wr <= not(out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_V_last_V_1_state = ap_const_lv2_2) and (out_V_last_V_1_vld_in = ap_const_logic_0)) or ((out_V_last_V_1_state = ap_const_lv2_3) and (out_V_last_V_1_vld_in = ap_const_logic_0) and (out_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((out_V_last_V_1_state = ap_const_lv2_1) and (out_V_last_V_1_ack_out = ap_const_logic_0)) or ((out_V_last_V_1_state = ap_const_lv2_3) and (out_V_last_V_1_ack_out = ap_const_logic_0) and (out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_V_last_V_1_vld_in = ap_const_logic_0) and (out_V_last_V_1_ack_out = ap_const_logic_1))) and not(((out_V_last_V_1_ack_out = ap_const_logic_0) and (out_V_last_V_1_vld_in = ap_const_logic_1))) and (out_V_last_V_1_state = ap_const_lv2_3)) or ((out_V_last_V_1_state = ap_const_lv2_1) and (out_V_last_V_1_ack_out = ap_const_logic_1)) or ((out_V_last_V_1_state = ap_const_lv2_2) and (out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_V_strb_V_1_ack_out = ap_const_logic_1) and (out_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        out_V_strb_V_1_sel_rd <= not(out_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_V_strb_V_1_state = ap_const_lv2_2) and (out_V_strb_V_1_vld_in = ap_const_logic_0)) or ((out_V_strb_V_1_state = ap_const_lv2_3) and (out_V_strb_V_1_vld_in = ap_const_logic_0) and (out_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    out_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((out_V_strb_V_1_state = ap_const_lv2_1) and (out_V_strb_V_1_ack_out = ap_const_logic_0)) or ((out_V_strb_V_1_state = ap_const_lv2_3) and (out_V_strb_V_1_ack_out = ap_const_logic_0) and (out_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_V_strb_V_1_vld_in = ap_const_logic_0) and (out_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((out_V_strb_V_1_ack_out = ap_const_logic_0) and (out_V_strb_V_1_vld_in = ap_const_logic_1))) and (out_V_strb_V_1_state = ap_const_lv2_3)) or ((out_V_strb_V_1_state = ap_const_lv2_1) and (out_V_strb_V_1_ack_out = ap_const_logic_1)) or ((out_V_strb_V_1_state = ap_const_lv2_2) and (out_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_V_user_V_1_ack_out = ap_const_logic_1) and (out_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        out_V_user_V_1_sel_rd <= not(out_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_V_user_V_1_state = ap_const_lv2_2) and (out_V_user_V_1_vld_in = ap_const_logic_0)) or ((out_V_user_V_1_state = ap_const_lv2_3) and (out_V_user_V_1_vld_in = ap_const_logic_0) and (out_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    out_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((out_V_user_V_1_state = ap_const_lv2_1) and (out_V_user_V_1_ack_out = ap_const_logic_0)) or ((out_V_user_V_1_state = ap_const_lv2_3) and (out_V_user_V_1_ack_out = ap_const_logic_0) and (out_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_V_user_V_1_vld_in = ap_const_logic_0) and (out_V_user_V_1_ack_out = ap_const_logic_1))) and not(((out_V_user_V_1_ack_out = ap_const_logic_0) and (out_V_user_V_1_vld_in = ap_const_logic_1))) and (out_V_user_V_1_state = ap_const_lv2_3)) or ((out_V_user_V_1_state = ap_const_lv2_1) and (out_V_user_V_1_ack_out = ap_const_logic_1)) or ((out_V_user_V_1_state = ap_const_lv2_2) and (out_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    col_1_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_V_dest_V_1_ack_in = ap_const_logic_0) or (out_V_id_V_1_ack_in = ap_const_logic_0) or (out_V_last_V_1_ack_in = ap_const_logic_0) or (out_V_user_V_1_ack_in = ap_const_logic_0) or (out_V_strb_V_1_ack_in = ap_const_logic_0) or (out_V_keep_V_1_ack_in = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond1_fu_475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                col_1_reg_264 <= ap_const_lv10_0;
            elsif (((out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                col_1_reg_264 <= col_3_reg_794;
            end if; 
        end if;
    end process;

    col_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_reg_242 <= ap_const_lv10_0;
            elsif ((not(((tmp_2_fu_389_p2 = ap_const_lv1_0) and (in_V_data_V_0_vld_out = ap_const_logic_0))) and (tmp_2_fu_389_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                col_reg_242 <= col_2_fu_395_p2;
            end if; 
        end if;
    end process;

    i_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_497_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_reg_300 <= ap_const_lv3_7;
            elsif (((exitcond_fu_653_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_reg_300 <= i_1_fu_713_p2;
            end if; 
        end if;
    end process;

    j_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state6_io) and (exitcond3_fu_513_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_reg_336 <= ap_const_lv3_7;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_reg_336 <= j_1_reg_845;
            end if; 
        end if;
    end process;

    p_0218_1_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state6_io) and (exitcond3_fu_513_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_0218_1_reg_324 <= p_2_reg_288;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_0218_1_reg_324 <= grp_fu_744_p3;
            end if; 
        end if;
    end process;

    p_0230_1_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state6_io) and (exitcond3_fu_513_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_0230_1_reg_312 <= p_1_reg_276;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_0230_1_reg_312 <= grp_fu_736_p3;
            end if; 
        end if;
    end process;

    p_1_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_497_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_1_reg_276 <= ap_const_lv8_0;
            elsif (((exitcond_fu_653_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_1_reg_276 <= p_0230_1_reg_312;
            end if; 
        end if;
    end process;

    p_2_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_497_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_2_reg_288 <= ap_const_lv8_0;
            elsif (((exitcond_fu_653_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_2_reg_288 <= p_0218_1_reg_324;
            end if; 
        end if;
    end process;

    row_1_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_347_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_1_reg_253 <= ap_const_lv9_0;
            elsif (((exitcond2_fu_497_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                row_1_reg_253 <= row_3_reg_776;
            end if; 
        end if;
    end process;

    row_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_2_fu_389_p2 = ap_const_lv1_0) and (in_V_data_V_0_vld_out = ap_const_logic_0))) and (tmp_2_fu_389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                row_reg_231 <= row_2_reg_755;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                row_reg_231 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                col_3_reg_794 <= col_3_fu_503_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_data_V_0_load_A = ap_const_logic_1)) then
                in_V_data_V_0_payload_A <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_data_V_0_load_B = ap_const_logic_1)) then
                in_V_data_V_0_payload_B <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_653_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                j_1_reg_845 <= j_1_fu_707_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_data_V_1_load_A = ap_const_logic_1)) then
                out_V_data_V_1_payload_A <= p_Result_3_fu_630_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_data_V_1_load_B = ap_const_logic_1)) then
                out_V_data_V_1_payload_B <= p_Result_3_fu_630_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_last_V_1_load_A = ap_const_logic_1)) then
                out_V_last_V_1_payload_A <= tmp_last_V_fu_647_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_last_V_1_load_B = ap_const_logic_1)) then
                out_V_last_V_1_payload_B <= tmp_last_V_fu_647_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_2_reg_755 <= row_2_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_V_dest_V_1_ack_in = ap_const_logic_0) or (out_V_id_V_1_ack_in = ap_const_logic_0) or (out_V_last_V_1_ack_in = ap_const_logic_0) or (out_V_user_V_1_ack_in = ap_const_logic_0) or (out_V_strb_V_1_ack_in = ap_const_logic_0) or (out_V_keep_V_1_ack_in = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                row_3_reg_776 <= row_3_fu_481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state6_io) and (exitcond3_fu_513_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_20_reg_807(19 downto 7) <= tmp_20_fu_556_p2(19 downto 7);
                tmp_22_reg_812 <= tmp_22_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_V_dest_V_1_ack_in = ap_const_logic_0) or (out_V_id_V_1_ack_in = ap_const_logic_0) or (out_V_last_V_1_ack_in = ap_const_logic_0) or (out_V_user_V_1_ack_in = ap_const_logic_0) or (out_V_strb_V_1_ack_in = ap_const_logic_0) or (out_V_keep_V_1_ack_in = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond1_fu_475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_4_reg_781 <= tmp_4_fu_487_p2;
                    tmp_5_cast_reg_786(8 downto 0) <= tmp_5_cast_fu_493_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_497_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    tmp_7_cast_reg_799(9 downto 0) <= tmp_7_cast_fu_509_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_s_reg_760(18 downto 7) <= tmp_s_fu_383_p2(18 downto 7);
            end if;
        end if;
    end process;
    tmp_s_reg_760(6 downto 0) <= "0000000";
    tmp_5_cast_reg_786(9) <= '0';
    tmp_7_cast_reg_799(10) <= '0';
    tmp_20_reg_807(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, in_V_data_V_0_vld_out, out_V_data_V_1_ack_in, out_V_data_V_1_state, out_V_keep_V_1_ack_in, out_V_keep_V_1_state, out_V_strb_V_1_ack_in, out_V_strb_V_1_state, out_V_user_V_1_ack_in, out_V_user_V_1_state, out_V_last_V_1_ack_in, out_V_last_V_1_state, out_V_id_V_1_ack_in, out_V_id_V_1_state, out_V_dest_V_1_ack_in, out_V_dest_V_1_state, ap_CS_fsm_state3, tmp_2_fu_389_p2, ap_CS_fsm_state6, exitcond3_fu_513_p2, ap_CS_fsm_state9, ap_CS_fsm_state2, tmp_fu_347_p2, ap_CS_fsm_state4, exitcond1_fu_475_p2, ap_CS_fsm_state5, exitcond2_fu_497_p2, ap_block_state6_io, ap_CS_fsm_state7, exitcond_fu_653_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_347_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((tmp_2_fu_389_p2 = ap_const_lv1_0) and (in_V_data_V_0_vld_out = ap_const_logic_0))) and (tmp_2_fu_389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((tmp_2_fu_389_p2 = ap_const_lv1_0) and (in_V_data_V_0_vld_out = ap_const_logic_0))) and (tmp_2_fu_389_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((out_V_dest_V_1_ack_in = ap_const_logic_0) or (out_V_id_V_1_ack_in = ap_const_logic_0) or (out_V_last_V_1_ack_in = ap_const_logic_0) or (out_V_user_V_1_ack_in = ap_const_logic_0) or (out_V_strb_V_1_ack_in = ap_const_logic_0) or (out_V_keep_V_1_ack_in = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond1_fu_475_p2 = ap_const_lv1_1) and (out_V_dest_V_1_state(0) = ap_const_logic_0) and (out_V_id_V_1_state(0) = ap_const_logic_0) and (out_V_last_V_1_state(0) = ap_const_logic_0) and (out_V_user_V_1_state(0) = ap_const_logic_0) and (out_V_strb_V_1_state(0) = ap_const_logic_0) and (out_V_keep_V_1_state(0) = ap_const_logic_0) and (out_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((out_V_dest_V_1_ack_in = ap_const_logic_0) or (out_V_id_V_1_ack_in = ap_const_logic_0) or (out_V_last_V_1_ack_in = ap_const_logic_0) or (out_V_user_V_1_ack_in = ap_const_logic_0) or (out_V_strb_V_1_ack_in = ap_const_logic_0) or (out_V_keep_V_1_ack_in = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond1_fu_475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond2_fu_497_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_boolean_0 = ap_block_state6_io) and (exitcond3_fu_513_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((ap_const_boolean_0 = ap_block_state6_io) and (exitcond3_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((exitcond_fu_653_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state3_assign_proc : process(in_V_data_V_0_vld_out, tmp_2_fu_389_p2)
    begin
                ap_block_state3 <= ((tmp_2_fu_389_p2 = ap_const_lv1_0) and (in_V_data_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(out_V_data_V_1_ack_in, out_V_keep_V_1_ack_in, out_V_strb_V_1_ack_in, out_V_user_V_1_ack_in, out_V_last_V_1_ack_in, out_V_id_V_1_ack_in, out_V_dest_V_1_ack_in)
    begin
                ap_block_state4 <= ((out_V_dest_V_1_ack_in = ap_const_logic_0) or (out_V_id_V_1_ack_in = ap_const_logic_0) or (out_V_last_V_1_ack_in = ap_const_logic_0) or (out_V_user_V_1_ack_in = ap_const_logic_0) or (out_V_strb_V_1_ack_in = ap_const_logic_0) or (out_V_keep_V_1_ack_in = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state6_io_assign_proc : process(out_V_data_V_1_ack_in, exitcond3_fu_513_p2)
    begin
                ap_block_state6_io <= ((exitcond3_fu_513_p2 = ap_const_lv1_1) and (out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(out_V_data_V_1_ack_in, out_V_data_V_1_state, out_V_keep_V_1_ack_in, out_V_keep_V_1_state, out_V_strb_V_1_ack_in, out_V_strb_V_1_state, out_V_user_V_1_ack_in, out_V_user_V_1_state, out_V_last_V_1_ack_in, out_V_last_V_1_state, out_V_id_V_1_ack_in, out_V_id_V_1_state, out_V_dest_V_1_ack_in, out_V_dest_V_1_state, ap_CS_fsm_state4, exitcond1_fu_475_p2)
    begin
        if ((not(((out_V_dest_V_1_ack_in = ap_const_logic_0) or (out_V_id_V_1_ack_in = ap_const_logic_0) or (out_V_last_V_1_ack_in = ap_const_logic_0) or (out_V_user_V_1_ack_in = ap_const_logic_0) or (out_V_strb_V_1_ack_in = ap_const_logic_0) or (out_V_keep_V_1_ack_in = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond1_fu_475_p2 = ap_const_lv1_1) and (out_V_dest_V_1_state(0) = ap_const_logic_0) and (out_V_id_V_1_state(0) = ap_const_logic_0) and (out_V_last_V_1_state(0) = ap_const_logic_0) and (out_V_user_V_1_state(0) = ap_const_logic_0) and (out_V_strb_V_1_state(0) = ap_const_logic_0) and (out_V_keep_V_1_state(0) = ap_const_logic_0) and (out_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_V_data_V_1_ack_in, out_V_data_V_1_state, out_V_keep_V_1_ack_in, out_V_keep_V_1_state, out_V_strb_V_1_ack_in, out_V_strb_V_1_state, out_V_user_V_1_ack_in, out_V_user_V_1_state, out_V_last_V_1_ack_in, out_V_last_V_1_state, out_V_id_V_1_ack_in, out_V_id_V_1_state, out_V_dest_V_1_ack_in, out_V_dest_V_1_state, ap_CS_fsm_state4, exitcond1_fu_475_p2)
    begin
        if ((not(((out_V_dest_V_1_ack_in = ap_const_logic_0) or (out_V_id_V_1_ack_in = ap_const_logic_0) or (out_V_last_V_1_ack_in = ap_const_logic_0) or (out_V_user_V_1_ack_in = ap_const_logic_0) or (out_V_strb_V_1_ack_in = ap_const_logic_0) or (out_V_keep_V_1_ack_in = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0))) and (exitcond1_fu_475_p2 = ap_const_lv1_1) and (out_V_dest_V_1_state(0) = ap_const_logic_0) and (out_V_id_V_1_state(0) = ap_const_logic_0) and (out_V_last_V_1_state(0) = ap_const_logic_0) and (out_V_user_V_1_state(0) = ap_const_logic_0) and (out_V_strb_V_1_state(0) = ap_const_logic_0) and (out_V_keep_V_1_state(0) = ap_const_logic_0) and (out_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    col_2_fu_395_p2 <= std_logic_vector(unsigned(col_reg_242) + unsigned(ap_const_lv10_1));
    col_3_fu_503_p2 <= std_logic_vector(unsigned(col_1_reg_264) + unsigned(ap_const_lv10_1));
    edge_w_V_fu_590_p2 <= std_logic_vector(unsigned(p_1_reg_276) + unsigned(p_2_reg_288));
    exitcond1_fu_475_p2 <= "1" when (row_1_reg_253 = ap_const_lv9_1E0) else "0";
    exitcond2_fu_497_p2 <= "1" when (col_1_reg_264 = ap_const_lv10_280) else "0";
    exitcond3_fu_513_p2 <= "1" when (i_reg_300 = ap_const_lv3_2) else "0";
    exitcond_fu_653_p2 <= "1" when (j_reg_336 = ap_const_lv3_2) else "0";
    grp_fu_727_p0 <= grp_fu_727_p00(8 - 1 downto 0);
    grp_fu_727_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_439_p1),10));
    grp_fu_727_p1 <= grp_fu_727_p10(9 - 1 downto 0);
    grp_fu_727_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_433_p2),10));
    grp_fu_727_p2 <= ap_const_lv22_556(12 - 1 downto 0);
    i_1_fu_713_p2 <= std_logic_vector(signed(i_reg_300) + signed(ap_const_lv3_1));

    img_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, tmp_19_cast_fu_470_p1, tmp_25_cast_fu_681_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            img_V_address0 <= tmp_25_cast_fu_681_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            img_V_address0 <= tmp_19_cast_fu_470_p1(19 - 1 downto 0);
        else 
            img_V_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    img_V_ce0_assign_proc : process(in_V_data_V_0_vld_out, ap_CS_fsm_state3, tmp_2_fu_389_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (not(((tmp_2_fu_389_p2 = ap_const_lv1_0) and (in_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            img_V_ce0 <= ap_const_logic_1;
        else 
            img_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    img_V_d0 <= grp_fu_727_p3(19 downto 12);

    img_V_we0_assign_proc : process(in_V_data_V_0_vld_out, ap_CS_fsm_state3, tmp_2_fu_389_p2)
    begin
        if ((not(((tmp_2_fu_389_p2 = ap_const_lv1_0) and (in_V_data_V_0_vld_out = ap_const_logic_0))) and (tmp_2_fu_389_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            img_V_we0 <= ap_const_logic_1;
        else 
            img_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    in_V_data_V_0_ack_in <= in_V_data_V_0_state(1);

    in_V_data_V_0_ack_out_assign_proc : process(in_V_data_V_0_vld_out, ap_CS_fsm_state3, tmp_2_fu_389_p2)
    begin
        if ((not(((tmp_2_fu_389_p2 = ap_const_lv1_0) and (in_V_data_V_0_vld_out = ap_const_logic_0))) and (tmp_2_fu_389_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_V_data_V_0_data_out_assign_proc : process(in_V_data_V_0_payload_A, in_V_data_V_0_payload_B, in_V_data_V_0_sel)
    begin
        if ((in_V_data_V_0_sel = ap_const_logic_1)) then 
            in_V_data_V_0_data_out <= in_V_data_V_0_payload_B;
        else 
            in_V_data_V_0_data_out <= in_V_data_V_0_payload_A;
        end if; 
    end process;

    in_V_data_V_0_load_A <= (in_V_data_V_0_state_cmp_full and not(in_V_data_V_0_sel_wr));
    in_V_data_V_0_load_B <= (in_V_data_V_0_state_cmp_full and in_V_data_V_0_sel_wr);
    in_V_data_V_0_sel <= in_V_data_V_0_sel_rd;
    in_V_data_V_0_state_cmp_full <= '0' when (in_V_data_V_0_state = ap_const_lv2_1) else '1';
    in_V_data_V_0_vld_in <= in_r_TVALID;
    in_V_data_V_0_vld_out <= in_V_data_V_0_state(0);

    in_V_dest_V_0_ack_out_assign_proc : process(in_V_data_V_0_vld_out, ap_CS_fsm_state3, tmp_2_fu_389_p2)
    begin
        if ((not(((tmp_2_fu_389_p2 = ap_const_lv1_0) and (in_V_data_V_0_vld_out = ap_const_logic_0))) and (tmp_2_fu_389_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            in_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    in_V_dest_V_0_vld_in <= in_r_TVALID;

    in_r_TDATA_blk_n_assign_proc : process(in_V_data_V_0_state, ap_CS_fsm_state3, tmp_2_fu_389_p2)
    begin
        if (((tmp_2_fu_389_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_r_TDATA_blk_n <= in_V_data_V_0_state(0);
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_r_TREADY <= in_V_dest_V_0_state(1);
    j_1_fu_707_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(j_reg_336));
    kernelX_address0 <= tmp_26_cast_fu_701_p1(4 - 1 downto 0);

    kernelX_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            kernelX_ce0 <= ap_const_logic_1;
        else 
            kernelX_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernelY_address0 <= tmp_26_cast_fu_701_p1(4 - 1 downto 0);

    kernelY_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            kernelY_ce0 <= ap_const_logic_1;
        else 
            kernelY_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_cast_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_405_p4),9));
    out_V_data_V_1_ack_in <= out_V_data_V_1_state(1);
    out_V_data_V_1_ack_out <= out_r_TREADY;

    out_V_data_V_1_data_out_assign_proc : process(out_V_data_V_1_payload_A, out_V_data_V_1_payload_B, out_V_data_V_1_sel)
    begin
        if ((out_V_data_V_1_sel = ap_const_logic_1)) then 
            out_V_data_V_1_data_out <= out_V_data_V_1_payload_B;
        else 
            out_V_data_V_1_data_out <= out_V_data_V_1_payload_A;
        end if; 
    end process;

    out_V_data_V_1_load_A <= (out_V_data_V_1_state_cmp_full and not(out_V_data_V_1_sel_wr));
    out_V_data_V_1_load_B <= (out_V_data_V_1_state_cmp_full and out_V_data_V_1_sel_wr);
    out_V_data_V_1_sel <= out_V_data_V_1_sel_rd;
    out_V_data_V_1_state_cmp_full <= '0' when (out_V_data_V_1_state = ap_const_lv2_1) else '1';

    out_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_state6, exitcond3_fu_513_p2, ap_block_state6_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state6_io) and (exitcond3_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_data_V_1_vld_out <= out_V_data_V_1_state(0);
    out_V_dest_V_1_ack_in <= out_V_dest_V_1_state(1);
    out_V_dest_V_1_ack_out <= out_r_TREADY;
    out_V_dest_V_1_data_out <= ap_const_lv1_1;
    out_V_dest_V_1_sel <= out_V_dest_V_1_sel_rd;

    out_V_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_state6, exitcond3_fu_513_p2, ap_block_state6_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state6_io) and (exitcond3_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            out_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_dest_V_1_vld_out <= out_V_dest_V_1_state(0);
    out_V_id_V_1_ack_in <= out_V_id_V_1_state(1);
    out_V_id_V_1_ack_out <= out_r_TREADY;
    out_V_id_V_1_data_out <= ap_const_lv1_1;
    out_V_id_V_1_sel <= out_V_id_V_1_sel_rd;

    out_V_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_state6, exitcond3_fu_513_p2, ap_block_state6_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state6_io) and (exitcond3_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            out_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_id_V_1_vld_out <= out_V_id_V_1_state(0);
    out_V_keep_V_1_ack_in <= out_V_keep_V_1_state(1);
    out_V_keep_V_1_ack_out <= out_r_TREADY;
    out_V_keep_V_1_data_out <= ap_const_lv3_7;
    out_V_keep_V_1_sel <= out_V_keep_V_1_sel_rd;

    out_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_state6, exitcond3_fu_513_p2, ap_block_state6_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state6_io) and (exitcond3_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            out_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_keep_V_1_vld_out <= out_V_keep_V_1_state(0);
    out_V_last_V_1_ack_in <= out_V_last_V_1_state(1);
    out_V_last_V_1_ack_out <= out_r_TREADY;

    out_V_last_V_1_data_out_assign_proc : process(out_V_last_V_1_payload_A, out_V_last_V_1_payload_B, out_V_last_V_1_sel)
    begin
        if ((out_V_last_V_1_sel = ap_const_logic_1)) then 
            out_V_last_V_1_data_out <= out_V_last_V_1_payload_B;
        else 
            out_V_last_V_1_data_out <= out_V_last_V_1_payload_A;
        end if; 
    end process;

    out_V_last_V_1_load_A <= (out_V_last_V_1_state_cmp_full and not(out_V_last_V_1_sel_wr));
    out_V_last_V_1_load_B <= (out_V_last_V_1_state_cmp_full and out_V_last_V_1_sel_wr);
    out_V_last_V_1_sel <= out_V_last_V_1_sel_rd;
    out_V_last_V_1_state_cmp_full <= '0' when (out_V_last_V_1_state = ap_const_lv2_1) else '1';

    out_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_state6, exitcond3_fu_513_p2, ap_block_state6_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state6_io) and (exitcond3_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_last_V_1_vld_out <= out_V_last_V_1_state(0);
    out_V_strb_V_1_ack_in <= out_V_strb_V_1_state(1);
    out_V_strb_V_1_ack_out <= out_r_TREADY;
    out_V_strb_V_1_data_out <= ap_const_lv3_7;
    out_V_strb_V_1_sel <= out_V_strb_V_1_sel_rd;

    out_V_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_state6, exitcond3_fu_513_p2, ap_block_state6_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state6_io) and (exitcond3_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            out_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_strb_V_1_vld_out <= out_V_strb_V_1_state(0);
    out_V_user_V_1_ack_in <= out_V_user_V_1_state(1);
    out_V_user_V_1_ack_out <= out_r_TREADY;
    out_V_user_V_1_data_out <= ap_const_lv1_1;
    out_V_user_V_1_sel <= out_V_user_V_1_sel_rd;

    out_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_state6, exitcond3_fu_513_p2, ap_block_state6_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state6_io) and (exitcond3_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            out_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_user_V_1_vld_out <= out_V_user_V_1_state(0);
    out_r_TDATA <= out_V_data_V_1_data_out;

    out_r_TDATA_blk_n_assign_proc : process(out_V_data_V_1_state, ap_CS_fsm_state6, exitcond3_fu_513_p2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((exitcond3_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            out_r_TDATA_blk_n <= out_V_data_V_1_state(1);
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TDEST <= out_V_dest_V_1_data_out;
    out_r_TID <= out_V_id_V_1_data_out;
    out_r_TKEEP <= out_V_keep_V_1_data_out;
    out_r_TLAST <= out_V_last_V_1_data_out;
    out_r_TSTRB <= out_V_strb_V_1_data_out;
    out_r_TUSER <= out_V_user_V_1_data_out;
    out_r_TVALID <= out_V_dest_V_1_state(0);
    p_Result_1_fu_415_p4 <= in_V_data_V_0_data_out(15 downto 8);
    p_Result_3_fu_630_p4 <= ((v2_V_fu_622_p3 & v2_V_fu_622_p3) & v2_V_fu_622_p3);
    p_Result_s_fu_405_p4 <= in_V_data_V_0_data_out(23 downto 16);
    p_s_fu_608_p3 <= 
        ap_const_lv8_FF when (tmp_3_fu_596_p2(0) = '1') else 
        ap_const_lv8_0;
    p_shl1_cast_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_371_p3),19));
    p_shl2_cast_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_572_p3),5));
        p_shl3_cast_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_fu_532_p3),20));

        p_shl4_cast_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_544_p3),20));

    p_shl_cast_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_359_p3),19));
    ret_V_fu_433_p2 <= std_logic_vector(unsigned(lhs_V_cast_fu_425_p1) + unsigned(rhs_V_cast_fu_429_p1));
    rhs_V_cast_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_415_p4),9));
    row_2_fu_353_p2 <= std_logic_vector(unsigned(row_reg_231) + unsigned(ap_const_lv9_1));
    row_3_fu_481_p2 <= std_logic_vector(unsigned(row_1_reg_253) + unsigned(ap_const_lv9_1));
    tmp_10_fu_562_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(tmp_15_fu_519_p1));
    tmp_11_cast_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_562_p2),5));
    tmp_11_fu_439_p1 <= in_V_data_V_0_data_out(8 - 1 downto 0);
    tmp_12_fu_667_p2 <= std_logic_vector(signed(tmp_14_cast_fu_663_p1) + signed(tmp_7_cast_reg_799));
        tmp_13_cast_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_667_p2),20));

    tmp_13_fu_465_p2 <= std_logic_vector(unsigned(tmp_s_reg_760) + unsigned(tmp_cast_fu_461_p1));
        tmp_14_cast_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_reg_336),11));

    tmp_14_fu_686_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(tmp_23_fu_659_p1));
    tmp_15_cast_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_686_p2),5));
    tmp_15_fu_519_p1 <= i_reg_300(2 - 1 downto 0);
    tmp_18_fu_532_p3 <= (tmp_9_fu_527_p2 & ap_const_lv9_0);
    tmp_19_cast_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_465_p2),64));
    tmp_19_fu_544_p3 <= (tmp_9_fu_527_p2 & ap_const_lv7_0);
    tmp_1_fu_359_p3 <= (row_reg_231 & ap_const_lv9_0);
    tmp_20_fu_556_p2 <= std_logic_vector(signed(p_shl3_cast_fu_540_p1) + signed(p_shl4_cast_fu_552_p1));
    tmp_21_fu_572_p3 <= (tmp_10_fu_562_p2 & ap_const_lv2_0);
    tmp_22_fu_584_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_580_p1) - unsigned(tmp_11_cast_fu_568_p1));
    tmp_23_fu_659_p1 <= j_reg_336(2 - 1 downto 0);
    tmp_24_fu_676_p2 <= std_logic_vector(unsigned(tmp_20_reg_807) + unsigned(tmp_13_cast_fu_672_p1));
        tmp_25_cast_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_fu_676_p2),64));

    tmp_25_fu_696_p2 <= std_logic_vector(unsigned(tmp_22_reg_812) + unsigned(tmp_15_cast_fu_692_p1));
        tmp_26_cast_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_25_fu_696_p2),64));

    tmp_2_fu_389_p2 <= "1" when (col_reg_242 = ap_const_lv10_280) else "0";
    tmp_3_fu_596_p2 <= "1" when (unsigned(edge_w_V_fu_590_p2) > unsigned(ap_const_lv8_C8)) else "0";
    tmp_4_fu_487_p2 <= "1" when (row_1_reg_253 = ap_const_lv9_1DF) else "0";
    tmp_5_cast_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_1_reg_253),10));
    tmp_5_fu_602_p2 <= "1" when (unsigned(edge_w_V_fu_590_p2) < unsigned(ap_const_lv8_64)) else "0";
    tmp_6_fu_371_p3 <= (row_reg_231 & ap_const_lv7_0);
    tmp_7_cast_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_1_reg_264),11));
    tmp_7_fu_616_p2 <= (tmp_5_fu_602_p2 or tmp_3_fu_596_p2);
        tmp_8_cast_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_reg_300),10));

    tmp_8_fu_641_p2 <= "1" when (col_1_reg_264 = ap_const_lv10_27F) else "0";
    tmp_9_fu_527_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_786) + unsigned(tmp_8_cast_fu_523_p1));
    tmp_cast_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_242),19));
    tmp_fu_347_p2 <= "1" when (row_reg_231 = ap_const_lv9_1E0) else "0";
    tmp_last_V_fu_647_p2 <= (tmp_8_fu_641_p2 and tmp_4_reg_781);
    tmp_s_fu_383_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_379_p1) + unsigned(p_shl_cast_fu_367_p1));
    v2_V_fu_622_p3 <= 
        p_s_fu_608_p3 when (tmp_7_fu_616_p2(0) = '1') else 
        edge_w_V_fu_590_p2;
end behav;
