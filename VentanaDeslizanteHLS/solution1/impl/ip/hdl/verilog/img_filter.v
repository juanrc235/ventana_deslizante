// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="img_filter,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.105000,HLS_SYN_LAT=8603522,HLS_SYN_TPT=none,HLS_SYN_MEM=150,HLS_SYN_DSP=3,HLS_SYN_FF=299,HLS_SYN_LUT=816,HLS_VERSION=2018_3}" *)

module img_filter (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TKEEP,
        in_r_TSTRB,
        in_r_TUSER,
        in_r_TLAST,
        in_r_TID,
        in_r_TDEST,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TUSER,
        out_r_TLAST,
        out_r_TID,
        out_r_TDEST
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [2:0] in_r_TKEEP;
input  [2:0] in_r_TSTRB;
input  [0:0] in_r_TUSER;
input  [0:0] in_r_TLAST;
input  [0:0] in_r_TID;
input  [0:0] in_r_TDEST;
output  [23:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [2:0] out_r_TKEEP;
output  [2:0] out_r_TSTRB;
output  [0:0] out_r_TUSER;
output  [0:0] out_r_TLAST;
output  [0:0] out_r_TID;
output  [0:0] out_r_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [23:0] in_V_data_V_0_data_out;
wire    in_V_data_V_0_vld_in;
wire    in_V_data_V_0_vld_out;
wire    in_V_data_V_0_ack_in;
reg    in_V_data_V_0_ack_out;
reg   [23:0] in_V_data_V_0_payload_A;
reg   [23:0] in_V_data_V_0_payload_B;
reg    in_V_data_V_0_sel_rd;
reg    in_V_data_V_0_sel_wr;
wire    in_V_data_V_0_sel;
wire    in_V_data_V_0_load_A;
wire    in_V_data_V_0_load_B;
reg   [1:0] in_V_data_V_0_state;
wire    in_V_data_V_0_state_cmp_full;
wire    in_V_dest_V_0_vld_in;
reg    in_V_dest_V_0_ack_out;
reg   [1:0] in_V_dest_V_0_state;
reg   [23:0] out_V_data_V_1_data_out;
reg    out_V_data_V_1_vld_in;
wire    out_V_data_V_1_vld_out;
wire    out_V_data_V_1_ack_in;
wire    out_V_data_V_1_ack_out;
reg   [23:0] out_V_data_V_1_payload_A;
reg   [23:0] out_V_data_V_1_payload_B;
reg    out_V_data_V_1_sel_rd;
reg    out_V_data_V_1_sel_wr;
wire    out_V_data_V_1_sel;
wire    out_V_data_V_1_load_A;
wire    out_V_data_V_1_load_B;
reg   [1:0] out_V_data_V_1_state;
wire    out_V_data_V_1_state_cmp_full;
wire   [2:0] out_V_keep_V_1_data_out;
reg    out_V_keep_V_1_vld_in;
wire    out_V_keep_V_1_vld_out;
wire    out_V_keep_V_1_ack_in;
wire    out_V_keep_V_1_ack_out;
reg    out_V_keep_V_1_sel_rd;
wire    out_V_keep_V_1_sel;
reg   [1:0] out_V_keep_V_1_state;
wire   [2:0] out_V_strb_V_1_data_out;
reg    out_V_strb_V_1_vld_in;
wire    out_V_strb_V_1_vld_out;
wire    out_V_strb_V_1_ack_in;
wire    out_V_strb_V_1_ack_out;
reg    out_V_strb_V_1_sel_rd;
wire    out_V_strb_V_1_sel;
reg   [1:0] out_V_strb_V_1_state;
wire   [0:0] out_V_user_V_1_data_out;
reg    out_V_user_V_1_vld_in;
wire    out_V_user_V_1_vld_out;
wire    out_V_user_V_1_ack_in;
wire    out_V_user_V_1_ack_out;
reg    out_V_user_V_1_sel_rd;
wire    out_V_user_V_1_sel;
reg   [1:0] out_V_user_V_1_state;
reg   [0:0] out_V_last_V_1_data_out;
reg    out_V_last_V_1_vld_in;
wire    out_V_last_V_1_vld_out;
wire    out_V_last_V_1_ack_in;
wire    out_V_last_V_1_ack_out;
reg   [0:0] out_V_last_V_1_payload_A;
reg   [0:0] out_V_last_V_1_payload_B;
reg    out_V_last_V_1_sel_rd;
reg    out_V_last_V_1_sel_wr;
wire    out_V_last_V_1_sel;
wire    out_V_last_V_1_load_A;
wire    out_V_last_V_1_load_B;
reg   [1:0] out_V_last_V_1_state;
wire    out_V_last_V_1_state_cmp_full;
wire   [0:0] out_V_id_V_1_data_out;
reg    out_V_id_V_1_vld_in;
wire    out_V_id_V_1_vld_out;
wire    out_V_id_V_1_ack_in;
wire    out_V_id_V_1_ack_out;
reg    out_V_id_V_1_sel_rd;
wire    out_V_id_V_1_sel;
reg   [1:0] out_V_id_V_1_state;
wire   [0:0] out_V_dest_V_1_data_out;
reg    out_V_dest_V_1_vld_in;
wire    out_V_dest_V_1_vld_out;
wire    out_V_dest_V_1_ack_in;
wire    out_V_dest_V_1_ack_out;
reg    out_V_dest_V_1_sel_rd;
wire    out_V_dest_V_1_sel;
reg   [1:0] out_V_dest_V_1_state;
wire   [3:0] kernelX_address0;
reg    kernelX_ce0;
wire  signed [2:0] kernelX_q0;
wire   [3:0] kernelY_address0;
reg    kernelY_ce0;
wire  signed [2:0] kernelY_q0;
reg    in_r_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_2_fu_389_p2;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond3_fu_513_p2;
wire    ap_CS_fsm_state9;
wire   [8:0] row_2_fu_353_p2;
reg   [8:0] row_2_reg_755;
wire    ap_CS_fsm_state2;
wire   [18:0] tmp_s_fu_383_p2;
reg   [18:0] tmp_s_reg_760;
wire   [0:0] tmp_fu_347_p2;
wire   [9:0] col_2_fu_395_p2;
reg    ap_block_state3;
wire   [8:0] row_3_fu_481_p2;
reg   [8:0] row_3_reg_776;
wire    ap_CS_fsm_state4;
reg    ap_block_state4;
wire   [0:0] tmp_4_fu_487_p2;
reg   [0:0] tmp_4_reg_781;
wire   [0:0] exitcond1_fu_475_p2;
wire   [9:0] tmp_5_cast_fu_493_p1;
reg   [9:0] tmp_5_cast_reg_786;
wire   [9:0] col_3_fu_503_p2;
reg   [9:0] col_3_reg_794;
wire    ap_CS_fsm_state5;
wire   [10:0] tmp_7_cast_fu_509_p1;
reg   [10:0] tmp_7_cast_reg_799;
wire   [0:0] exitcond2_fu_497_p2;
wire   [19:0] tmp_20_fu_556_p2;
reg   [19:0] tmp_20_reg_807;
reg    ap_block_state6_io;
wire   [4:0] tmp_22_fu_584_p2;
reg   [4:0] tmp_22_reg_812;
wire   [23:0] p_Result_3_fu_630_p4;
wire   [0:0] tmp_last_V_fu_647_p2;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond_fu_653_p2;
wire   [2:0] j_1_fu_707_p2;
reg   [2:0] j_1_reg_845;
wire   [2:0] i_1_fu_713_p2;
wire  signed [7:0] grp_fu_736_p3;
wire    ap_CS_fsm_state8;
wire  signed [7:0] grp_fu_744_p3;
reg   [18:0] img_V_address0;
reg    img_V_ce0;
reg    img_V_we0;
wire   [7:0] img_V_d0;
wire  signed [7:0] img_V_q0;
reg   [8:0] row_reg_231;
reg   [9:0] col_reg_242;
reg   [8:0] row_1_reg_253;
reg   [9:0] col_1_reg_264;
reg   [7:0] p_1_reg_276;
reg   [7:0] p_2_reg_288;
reg  signed [2:0] i_reg_300;
reg   [7:0] p_0230_1_reg_312;
reg   [7:0] p_0218_1_reg_324;
reg  signed [2:0] j_reg_336;
wire   [63:0] tmp_19_cast_fu_470_p1;
wire  signed [63:0] tmp_25_cast_fu_681_p1;
wire  signed [63:0] tmp_26_cast_fu_701_p1;
wire   [17:0] tmp_1_fu_359_p3;
wire   [15:0] tmp_6_fu_371_p3;
wire   [18:0] p_shl1_cast_fu_379_p1;
wire   [18:0] p_shl_cast_fu_367_p1;
wire   [7:0] p_Result_s_fu_405_p4;
wire   [7:0] p_Result_1_fu_415_p4;
wire   [8:0] lhs_V_cast_fu_425_p1;
wire   [8:0] rhs_V_cast_fu_429_p1;
wire   [8:0] ret_V_fu_433_p2;
wire   [7:0] tmp_11_fu_439_p1;
wire   [21:0] grp_fu_727_p3;
wire   [18:0] tmp_cast_fu_461_p1;
wire   [18:0] tmp_13_fu_465_p2;
wire  signed [9:0] tmp_8_cast_fu_523_p1;
wire   [9:0] tmp_9_fu_527_p2;
wire   [18:0] tmp_18_fu_532_p3;
wire   [16:0] tmp_19_fu_544_p3;
wire  signed [19:0] p_shl3_cast_fu_540_p1;
wire  signed [19:0] p_shl4_cast_fu_552_p1;
wire   [1:0] tmp_15_fu_519_p1;
wire   [1:0] tmp_10_fu_562_p2;
wire   [3:0] tmp_21_fu_572_p3;
wire   [4:0] p_shl2_cast_fu_580_p1;
wire   [4:0] tmp_11_cast_fu_568_p1;
wire   [7:0] edge_w_V_fu_590_p2;
wire   [0:0] tmp_3_fu_596_p2;
wire   [0:0] tmp_5_fu_602_p2;
wire   [0:0] tmp_7_fu_616_p2;
wire   [7:0] p_s_fu_608_p3;
wire   [7:0] v2_V_fu_622_p3;
wire   [0:0] tmp_8_fu_641_p2;
wire  signed [10:0] tmp_14_cast_fu_663_p1;
wire   [10:0] tmp_12_fu_667_p2;
wire  signed [19:0] tmp_13_cast_fu_672_p1;
wire   [19:0] tmp_24_fu_676_p2;
wire   [1:0] tmp_23_fu_659_p1;
wire   [1:0] tmp_14_fu_686_p2;
wire   [4:0] tmp_15_cast_fu_692_p1;
wire   [4:0] tmp_25_fu_696_p2;
wire   [7:0] grp_fu_727_p0;
wire   [8:0] grp_fu_727_p1;
wire   [11:0] grp_fu_727_p2;
reg   [8:0] ap_NS_fsm;
wire   [9:0] grp_fu_727_p00;
wire   [9:0] grp_fu_727_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 in_V_data_V_0_sel_rd = 1'b0;
#0 in_V_data_V_0_sel_wr = 1'b0;
#0 in_V_data_V_0_state = 2'd0;
#0 in_V_dest_V_0_state = 2'd0;
#0 out_V_data_V_1_sel_rd = 1'b0;
#0 out_V_data_V_1_sel_wr = 1'b0;
#0 out_V_data_V_1_state = 2'd0;
#0 out_V_keep_V_1_sel_rd = 1'b0;
#0 out_V_keep_V_1_state = 2'd0;
#0 out_V_strb_V_1_sel_rd = 1'b0;
#0 out_V_strb_V_1_state = 2'd0;
#0 out_V_user_V_1_sel_rd = 1'b0;
#0 out_V_user_V_1_state = 2'd0;
#0 out_V_last_V_1_sel_rd = 1'b0;
#0 out_V_last_V_1_sel_wr = 1'b0;
#0 out_V_last_V_1_state = 2'd0;
#0 out_V_id_V_1_sel_rd = 1'b0;
#0 out_V_id_V_1_state = 2'd0;
#0 out_V_dest_V_1_sel_rd = 1'b0;
#0 out_V_dest_V_1_state = 2'd0;
end

img_filter_kernelX #(
    .DataWidth( 3 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
kernelX_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernelX_address0),
    .ce0(kernelX_ce0),
    .q0(kernelX_q0)
);

img_filter_kernelY #(
    .DataWidth( 3 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
kernelY_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernelY_address0),
    .ce0(kernelY_ce0),
    .q0(kernelY_q0)
);

img_filter_img_V #(
    .DataWidth( 8 ),
    .AddressRange( 307200 ),
    .AddressWidth( 19 ))
img_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(img_V_address0),
    .ce0(img_V_ce0),
    .we0(img_V_we0),
    .d0(img_V_d0),
    .q0(img_V_q0)
);

img_filter_am_addbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 22 ))
img_filter_am_addbkb_U1(
    .din0(grp_fu_727_p0),
    .din1(grp_fu_727_p1),
    .din2(grp_fu_727_p2),
    .dout(grp_fu_727_p3)
);

img_filter_mac_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 3 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
img_filter_mac_mucud_U2(
    .din0(img_V_q0),
    .din1(kernelX_q0),
    .din2(p_0230_1_reg_312),
    .dout(grp_fu_736_p3)
);

img_filter_mac_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
img_filter_mac_mudEe_U3(
    .din0(kernelY_q0),
    .din1(img_V_q0),
    .din2(p_0218_1_reg_324),
    .dout(grp_fu_744_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_V_data_V_0_ack_out == 1'b1) & (in_V_data_V_0_vld_out == 1'b1))) begin
            in_V_data_V_0_sel_rd <= ~in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_V_data_V_0_ack_in == 1'b1) & (in_V_data_V_0_vld_in == 1'b1))) begin
            in_V_data_V_0_sel_wr <= ~in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_data_V_0_state == 2'd2) & (in_V_data_V_0_vld_in == 1'b0)) | ((in_V_data_V_0_state == 2'd3) & (in_V_data_V_0_vld_in == 1'b0) & (in_V_data_V_0_ack_out == 1'b1)))) begin
            in_V_data_V_0_state <= 2'd2;
        end else if ((((in_V_data_V_0_state == 2'd1) & (in_V_data_V_0_ack_out == 1'b0)) | ((in_V_data_V_0_state == 2'd3) & (in_V_data_V_0_ack_out == 1'b0) & (in_V_data_V_0_vld_in == 1'b1)))) begin
            in_V_data_V_0_state <= 2'd1;
        end else if (((~((in_V_data_V_0_vld_in == 1'b0) & (in_V_data_V_0_ack_out == 1'b1)) & ~((in_V_data_V_0_ack_out == 1'b0) & (in_V_data_V_0_vld_in == 1'b1)) & (in_V_data_V_0_state == 2'd3)) | ((in_V_data_V_0_state == 2'd1) & (in_V_data_V_0_ack_out == 1'b1)) | ((in_V_data_V_0_state == 2'd2) & (in_V_data_V_0_vld_in == 1'b1)))) begin
            in_V_data_V_0_state <= 2'd3;
        end else begin
            in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_dest_V_0_state == 2'd2) & (in_V_dest_V_0_vld_in == 1'b0)) | ((in_V_dest_V_0_state == 2'd3) & (in_V_dest_V_0_vld_in == 1'b0) & (in_V_dest_V_0_ack_out == 1'b1)))) begin
            in_V_dest_V_0_state <= 2'd2;
        end else if ((((in_V_dest_V_0_state == 2'd1) & (in_V_dest_V_0_ack_out == 1'b0)) | ((in_V_dest_V_0_state == 2'd3) & (in_V_dest_V_0_ack_out == 1'b0) & (in_V_dest_V_0_vld_in == 1'b1)))) begin
            in_V_dest_V_0_state <= 2'd1;
        end else if (((~((in_V_dest_V_0_vld_in == 1'b0) & (in_V_dest_V_0_ack_out == 1'b1)) & ~((in_V_dest_V_0_ack_out == 1'b0) & (in_V_dest_V_0_vld_in == 1'b1)) & (in_V_dest_V_0_state == 2'd3)) | ((in_V_dest_V_0_state == 2'd1) & (in_V_dest_V_0_ack_out == 1'b1)) | ((in_V_dest_V_0_state == 2'd2) & (in_V_dest_V_0_vld_in == 1'b1)))) begin
            in_V_dest_V_0_state <= 2'd3;
        end else begin
            in_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_data_V_1_ack_out == 1'b1) & (out_V_data_V_1_vld_out == 1'b1))) begin
            out_V_data_V_1_sel_rd <= ~out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_data_V_1_ack_in == 1'b1) & (out_V_data_V_1_vld_in == 1'b1))) begin
            out_V_data_V_1_sel_wr <= ~out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_data_V_1_state == 2'd2) & (out_V_data_V_1_vld_in == 1'b0)) | ((out_V_data_V_1_state == 2'd3) & (out_V_data_V_1_vld_in == 1'b0) & (out_V_data_V_1_ack_out == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd2;
        end else if ((((out_V_data_V_1_state == 2'd1) & (out_V_data_V_1_ack_out == 1'b0)) | ((out_V_data_V_1_state == 2'd3) & (out_V_data_V_1_ack_out == 1'b0) & (out_V_data_V_1_vld_in == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd1;
        end else if (((~((out_V_data_V_1_vld_in == 1'b0) & (out_V_data_V_1_ack_out == 1'b1)) & ~((out_V_data_V_1_ack_out == 1'b0) & (out_V_data_V_1_vld_in == 1'b1)) & (out_V_data_V_1_state == 2'd3)) | ((out_V_data_V_1_state == 2'd1) & (out_V_data_V_1_ack_out == 1'b1)) | ((out_V_data_V_1_state == 2'd2) & (out_V_data_V_1_vld_in == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd3;
        end else begin
            out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_dest_V_1_ack_out == 1'b1) & (out_V_dest_V_1_vld_out == 1'b1))) begin
            out_V_dest_V_1_sel_rd <= ~out_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_dest_V_1_state == 2'd2) & (out_V_dest_V_1_vld_in == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_V_dest_V_1_vld_in == 1'b0) & (out_V_dest_V_1_ack_out == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd2;
        end else if ((((out_V_dest_V_1_state == 2'd1) & (out_V_dest_V_1_ack_out == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_V_dest_V_1_ack_out == 1'b0) & (out_V_dest_V_1_vld_in == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd1;
        end else if (((~((out_V_dest_V_1_vld_in == 1'b0) & (out_V_dest_V_1_ack_out == 1'b1)) & ~((out_V_dest_V_1_ack_out == 1'b0) & (out_V_dest_V_1_vld_in == 1'b1)) & (out_V_dest_V_1_state == 2'd3)) | ((out_V_dest_V_1_state == 2'd1) & (out_V_dest_V_1_ack_out == 1'b1)) | ((out_V_dest_V_1_state == 2'd2) & (out_V_dest_V_1_vld_in == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd3;
        end else begin
            out_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_id_V_1_ack_out == 1'b1) & (out_V_id_V_1_vld_out == 1'b1))) begin
            out_V_id_V_1_sel_rd <= ~out_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_id_V_1_state == 2'd2) & (out_V_id_V_1_vld_in == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_V_id_V_1_vld_in == 1'b0) & (out_V_id_V_1_ack_out == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd2;
        end else if ((((out_V_id_V_1_state == 2'd1) & (out_V_id_V_1_ack_out == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_V_id_V_1_ack_out == 1'b0) & (out_V_id_V_1_vld_in == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd1;
        end else if (((~((out_V_id_V_1_vld_in == 1'b0) & (out_V_id_V_1_ack_out == 1'b1)) & ~((out_V_id_V_1_ack_out == 1'b0) & (out_V_id_V_1_vld_in == 1'b1)) & (out_V_id_V_1_state == 2'd3)) | ((out_V_id_V_1_state == 2'd1) & (out_V_id_V_1_ack_out == 1'b1)) | ((out_V_id_V_1_state == 2'd2) & (out_V_id_V_1_vld_in == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd3;
        end else begin
            out_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_keep_V_1_ack_out == 1'b1) & (out_V_keep_V_1_vld_out == 1'b1))) begin
            out_V_keep_V_1_sel_rd <= ~out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_keep_V_1_state == 2'd2) & (out_V_keep_V_1_vld_in == 1'b0)) | ((out_V_keep_V_1_state == 2'd3) & (out_V_keep_V_1_vld_in == 1'b0) & (out_V_keep_V_1_ack_out == 1'b1)))) begin
            out_V_keep_V_1_state <= 2'd2;
        end else if ((((out_V_keep_V_1_state == 2'd1) & (out_V_keep_V_1_ack_out == 1'b0)) | ((out_V_keep_V_1_state == 2'd3) & (out_V_keep_V_1_ack_out == 1'b0) & (out_V_keep_V_1_vld_in == 1'b1)))) begin
            out_V_keep_V_1_state <= 2'd1;
        end else if (((~((out_V_keep_V_1_vld_in == 1'b0) & (out_V_keep_V_1_ack_out == 1'b1)) & ~((out_V_keep_V_1_ack_out == 1'b0) & (out_V_keep_V_1_vld_in == 1'b1)) & (out_V_keep_V_1_state == 2'd3)) | ((out_V_keep_V_1_state == 2'd1) & (out_V_keep_V_1_ack_out == 1'b1)) | ((out_V_keep_V_1_state == 2'd2) & (out_V_keep_V_1_vld_in == 1'b1)))) begin
            out_V_keep_V_1_state <= 2'd3;
        end else begin
            out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_last_V_1_ack_out == 1'b1) & (out_V_last_V_1_vld_out == 1'b1))) begin
            out_V_last_V_1_sel_rd <= ~out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_last_V_1_ack_in == 1'b1) & (out_V_last_V_1_vld_in == 1'b1))) begin
            out_V_last_V_1_sel_wr <= ~out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_last_V_1_state == 2'd2) & (out_V_last_V_1_vld_in == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_V_last_V_1_vld_in == 1'b0) & (out_V_last_V_1_ack_out == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd2;
        end else if ((((out_V_last_V_1_state == 2'd1) & (out_V_last_V_1_ack_out == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_V_last_V_1_ack_out == 1'b0) & (out_V_last_V_1_vld_in == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd1;
        end else if (((~((out_V_last_V_1_vld_in == 1'b0) & (out_V_last_V_1_ack_out == 1'b1)) & ~((out_V_last_V_1_ack_out == 1'b0) & (out_V_last_V_1_vld_in == 1'b1)) & (out_V_last_V_1_state == 2'd3)) | ((out_V_last_V_1_state == 2'd1) & (out_V_last_V_1_ack_out == 1'b1)) | ((out_V_last_V_1_state == 2'd2) & (out_V_last_V_1_vld_in == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd3;
        end else begin
            out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_strb_V_1_ack_out == 1'b1) & (out_V_strb_V_1_vld_out == 1'b1))) begin
            out_V_strb_V_1_sel_rd <= ~out_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_strb_V_1_state == 2'd2) & (out_V_strb_V_1_vld_in == 1'b0)) | ((out_V_strb_V_1_state == 2'd3) & (out_V_strb_V_1_vld_in == 1'b0) & (out_V_strb_V_1_ack_out == 1'b1)))) begin
            out_V_strb_V_1_state <= 2'd2;
        end else if ((((out_V_strb_V_1_state == 2'd1) & (out_V_strb_V_1_ack_out == 1'b0)) | ((out_V_strb_V_1_state == 2'd3) & (out_V_strb_V_1_ack_out == 1'b0) & (out_V_strb_V_1_vld_in == 1'b1)))) begin
            out_V_strb_V_1_state <= 2'd1;
        end else if (((~((out_V_strb_V_1_vld_in == 1'b0) & (out_V_strb_V_1_ack_out == 1'b1)) & ~((out_V_strb_V_1_ack_out == 1'b0) & (out_V_strb_V_1_vld_in == 1'b1)) & (out_V_strb_V_1_state == 2'd3)) | ((out_V_strb_V_1_state == 2'd1) & (out_V_strb_V_1_ack_out == 1'b1)) | ((out_V_strb_V_1_state == 2'd2) & (out_V_strb_V_1_vld_in == 1'b1)))) begin
            out_V_strb_V_1_state <= 2'd3;
        end else begin
            out_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_user_V_1_ack_out == 1'b1) & (out_V_user_V_1_vld_out == 1'b1))) begin
            out_V_user_V_1_sel_rd <= ~out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_user_V_1_state == 2'd2) & (out_V_user_V_1_vld_in == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_V_user_V_1_vld_in == 1'b0) & (out_V_user_V_1_ack_out == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd2;
        end else if ((((out_V_user_V_1_state == 2'd1) & (out_V_user_V_1_ack_out == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_V_user_V_1_ack_out == 1'b0) & (out_V_user_V_1_vld_in == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd1;
        end else if (((~((out_V_user_V_1_vld_in == 1'b0) & (out_V_user_V_1_ack_out == 1'b1)) & ~((out_V_user_V_1_ack_out == 1'b0) & (out_V_user_V_1_vld_in == 1'b1)) & (out_V_user_V_1_state == 2'd3)) | ((out_V_user_V_1_state == 2'd1) & (out_V_user_V_1_ack_out == 1'b1)) | ((out_V_user_V_1_state == 2'd2) & (out_V_user_V_1_vld_in == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd3;
        end else begin
            out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0)) & (exitcond1_fu_475_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        col_1_reg_264 <= 10'd0;
    end else if (((out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        col_1_reg_264 <= col_3_reg_794;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_347_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        col_reg_242 <= 10'd0;
    end else if ((~((tmp_2_fu_389_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) & (tmp_2_fu_389_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        col_reg_242 <= col_2_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_497_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_300 <= 3'd7;
    end else if (((exitcond_fu_653_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_reg_300 <= i_1_fu_713_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state6_io) & (exitcond3_fu_513_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        j_reg_336 <= 3'd7;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_336 <= j_1_reg_845;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state6_io) & (exitcond3_fu_513_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        p_0218_1_reg_324 <= p_2_reg_288;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_0218_1_reg_324 <= grp_fu_744_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state6_io) & (exitcond3_fu_513_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        p_0230_1_reg_312 <= p_1_reg_276;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_0230_1_reg_312 <= grp_fu_736_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_497_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_1_reg_276 <= 8'd0;
    end else if (((exitcond_fu_653_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        p_1_reg_276 <= p_0230_1_reg_312;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_497_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_2_reg_288 <= 8'd0;
    end else if (((exitcond_fu_653_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        p_2_reg_288 <= p_0218_1_reg_324;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_347_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        row_1_reg_253 <= 9'd0;
    end else if (((exitcond2_fu_497_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        row_1_reg_253 <= row_3_reg_776;
    end
end

always @ (posedge ap_clk) begin
    if ((~((tmp_2_fu_389_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) & (tmp_2_fu_389_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        row_reg_231 <= row_2_reg_755;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        row_reg_231 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        col_3_reg_794 <= col_3_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_data_V_0_load_A == 1'b1)) begin
        in_V_data_V_0_payload_A <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_data_V_0_load_B == 1'b1)) begin
        in_V_data_V_0_payload_B <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_653_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        j_1_reg_845 <= j_1_fu_707_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_data_V_1_load_A == 1'b1)) begin
        out_V_data_V_1_payload_A <= p_Result_3_fu_630_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_data_V_1_load_B == 1'b1)) begin
        out_V_data_V_1_payload_B <= p_Result_3_fu_630_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_last_V_1_load_A == 1'b1)) begin
        out_V_last_V_1_payload_A <= tmp_last_V_fu_647_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_last_V_1_load_B == 1'b1)) begin
        out_V_last_V_1_payload_B <= tmp_last_V_fu_647_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_2_reg_755 <= row_2_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        row_3_reg_776 <= row_3_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state6_io) & (exitcond3_fu_513_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_20_reg_807[19 : 7] <= tmp_20_fu_556_p2[19 : 7];
        tmp_22_reg_812 <= tmp_22_fu_584_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0)) & (exitcond1_fu_475_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_4_reg_781 <= tmp_4_fu_487_p2;
        tmp_5_cast_reg_786[8 : 0] <= tmp_5_cast_fu_493_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_497_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_7_cast_reg_799[9 : 0] <= tmp_7_cast_fu_509_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_347_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_s_reg_760[18 : 7] <= tmp_s_fu_383_p2[18 : 7];
    end
end

always @ (*) begin
    if ((~((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0)) & (exitcond1_fu_475_p2 == 1'd1) & (out_V_dest_V_1_state[1'd0] == 1'b0) & (out_V_id_V_1_state[1'd0] == 1'b0) & (out_V_last_V_1_state[1'd0] == 1'b0) & (out_V_user_V_1_state[1'd0] == 1'b0) & (out_V_strb_V_1_state[1'd0] == 1'b0) & (out_V_keep_V_1_state[1'd0] == 1'b0) & (out_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0)) & (exitcond1_fu_475_p2 == 1'd1) & (out_V_dest_V_1_state[1'd0] == 1'b0) & (out_V_id_V_1_state[1'd0] == 1'b0) & (out_V_last_V_1_state[1'd0] == 1'b0) & (out_V_user_V_1_state[1'd0] == 1'b0) & (out_V_strb_V_1_state[1'd0] == 1'b0) & (out_V_keep_V_1_state[1'd0] == 1'b0) & (out_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        img_V_address0 = tmp_25_cast_fu_681_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        img_V_address0 = tmp_19_cast_fu_470_p1;
    end else begin
        img_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (~((tmp_2_fu_389_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        img_V_ce0 = 1'b1;
    end else begin
        img_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((tmp_2_fu_389_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) & (tmp_2_fu_389_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        img_V_we0 = 1'b1;
    end else begin
        img_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((tmp_2_fu_389_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) & (tmp_2_fu_389_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_V_data_V_0_ack_out = 1'b1;
    end else begin
        in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_V_data_V_0_sel == 1'b1)) begin
        in_V_data_V_0_data_out = in_V_data_V_0_payload_B;
    end else begin
        in_V_data_V_0_data_out = in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((tmp_2_fu_389_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) & (tmp_2_fu_389_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_V_dest_V_0_ack_out = 1'b1;
    end else begin
        in_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_fu_389_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_r_TDATA_blk_n = in_V_data_V_0_state[1'd0];
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        kernelX_ce0 = 1'b1;
    end else begin
        kernelX_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        kernelY_ce0 = 1'b1;
    end else begin
        kernelY_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((out_V_data_V_1_sel == 1'b1)) begin
        out_V_data_V_1_data_out = out_V_data_V_1_payload_B;
    end else begin
        out_V_data_V_1_data_out = out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state6_io) & (exitcond3_fu_513_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        out_V_data_V_1_vld_in = 1'b1;
    end else begin
        out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state6_io) & (exitcond3_fu_513_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        out_V_dest_V_1_vld_in = 1'b1;
    end else begin
        out_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state6_io) & (exitcond3_fu_513_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        out_V_id_V_1_vld_in = 1'b1;
    end else begin
        out_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state6_io) & (exitcond3_fu_513_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_V_last_V_1_sel == 1'b1)) begin
        out_V_last_V_1_data_out = out_V_last_V_1_payload_B;
    end else begin
        out_V_last_V_1_data_out = out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state6_io) & (exitcond3_fu_513_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        out_V_last_V_1_vld_in = 1'b1;
    end else begin
        out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state6_io) & (exitcond3_fu_513_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        out_V_strb_V_1_vld_in = 1'b1;
    end else begin
        out_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state6_io) & (exitcond3_fu_513_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        out_V_user_V_1_vld_in = 1'b1;
    end else begin
        out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((exitcond3_fu_513_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)))) begin
        out_r_TDATA_blk_n = out_V_data_V_1_state[1'd1];
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_347_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((tmp_2_fu_389_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) & (tmp_2_fu_389_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((tmp_2_fu_389_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0)) & (tmp_2_fu_389_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0)) & (exitcond1_fu_475_p2 == 1'd1) & (out_V_dest_V_1_state[1'd0] == 1'b0) & (out_V_id_V_1_state[1'd0] == 1'b0) & (out_V_last_V_1_state[1'd0] == 1'b0) & (out_V_user_V_1_state[1'd0] == 1'b0) & (out_V_strb_V_1_state[1'd0] == 1'b0) & (out_V_keep_V_1_state[1'd0] == 1'b0) & (out_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0)) & (exitcond1_fu_475_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond2_fu_497_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_io) & (exitcond3_fu_513_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((1'b0 == ap_block_state6_io) & (exitcond3_fu_513_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond_fu_653_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            if (((out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state3 = ((tmp_2_fu_389_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state6_io = ((exitcond3_fu_513_p2 == 1'd1) & (out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign col_2_fu_395_p2 = (col_reg_242 + 10'd1);

assign col_3_fu_503_p2 = (col_1_reg_264 + 10'd1);

assign edge_w_V_fu_590_p2 = (p_1_reg_276 + p_2_reg_288);

assign exitcond1_fu_475_p2 = ((row_1_reg_253 == 9'd480) ? 1'b1 : 1'b0);

assign exitcond2_fu_497_p2 = ((col_1_reg_264 == 10'd640) ? 1'b1 : 1'b0);

assign exitcond3_fu_513_p2 = ((i_reg_300 == 3'd2) ? 1'b1 : 1'b0);

assign exitcond_fu_653_p2 = ((j_reg_336 == 3'd2) ? 1'b1 : 1'b0);

assign grp_fu_727_p0 = grp_fu_727_p00;

assign grp_fu_727_p00 = tmp_11_fu_439_p1;

assign grp_fu_727_p1 = grp_fu_727_p10;

assign grp_fu_727_p10 = ret_V_fu_433_p2;

assign grp_fu_727_p2 = 22'd1366;

assign i_1_fu_713_p2 = ($signed(i_reg_300) + $signed(3'd1));

assign img_V_d0 = {{grp_fu_727_p3[19:12]}};

assign in_V_data_V_0_ack_in = in_V_data_V_0_state[1'd1];

assign in_V_data_V_0_load_A = (in_V_data_V_0_state_cmp_full & ~in_V_data_V_0_sel_wr);

assign in_V_data_V_0_load_B = (in_V_data_V_0_state_cmp_full & in_V_data_V_0_sel_wr);

assign in_V_data_V_0_sel = in_V_data_V_0_sel_rd;

assign in_V_data_V_0_state_cmp_full = ((in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_data_V_0_vld_in = in_r_TVALID;

assign in_V_data_V_0_vld_out = in_V_data_V_0_state[1'd0];

assign in_V_dest_V_0_vld_in = in_r_TVALID;

assign in_r_TREADY = in_V_dest_V_0_state[1'd1];

assign j_1_fu_707_p2 = ($signed(3'd1) + $signed(j_reg_336));

assign kernelX_address0 = tmp_26_cast_fu_701_p1;

assign kernelY_address0 = tmp_26_cast_fu_701_p1;

assign lhs_V_cast_fu_425_p1 = p_Result_s_fu_405_p4;

assign out_V_data_V_1_ack_in = out_V_data_V_1_state[1'd1];

assign out_V_data_V_1_ack_out = out_r_TREADY;

assign out_V_data_V_1_load_A = (out_V_data_V_1_state_cmp_full & ~out_V_data_V_1_sel_wr);

assign out_V_data_V_1_load_B = (out_V_data_V_1_state_cmp_full & out_V_data_V_1_sel_wr);

assign out_V_data_V_1_sel = out_V_data_V_1_sel_rd;

assign out_V_data_V_1_state_cmp_full = ((out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_data_V_1_vld_out = out_V_data_V_1_state[1'd0];

assign out_V_dest_V_1_ack_in = out_V_dest_V_1_state[1'd1];

assign out_V_dest_V_1_ack_out = out_r_TREADY;

assign out_V_dest_V_1_data_out = 1'd1;

assign out_V_dest_V_1_sel = out_V_dest_V_1_sel_rd;

assign out_V_dest_V_1_vld_out = out_V_dest_V_1_state[1'd0];

assign out_V_id_V_1_ack_in = out_V_id_V_1_state[1'd1];

assign out_V_id_V_1_ack_out = out_r_TREADY;

assign out_V_id_V_1_data_out = 1'd1;

assign out_V_id_V_1_sel = out_V_id_V_1_sel_rd;

assign out_V_id_V_1_vld_out = out_V_id_V_1_state[1'd0];

assign out_V_keep_V_1_ack_in = out_V_keep_V_1_state[1'd1];

assign out_V_keep_V_1_ack_out = out_r_TREADY;

assign out_V_keep_V_1_data_out = 3'd7;

assign out_V_keep_V_1_sel = out_V_keep_V_1_sel_rd;

assign out_V_keep_V_1_vld_out = out_V_keep_V_1_state[1'd0];

assign out_V_last_V_1_ack_in = out_V_last_V_1_state[1'd1];

assign out_V_last_V_1_ack_out = out_r_TREADY;

assign out_V_last_V_1_load_A = (out_V_last_V_1_state_cmp_full & ~out_V_last_V_1_sel_wr);

assign out_V_last_V_1_load_B = (out_V_last_V_1_state_cmp_full & out_V_last_V_1_sel_wr);

assign out_V_last_V_1_sel = out_V_last_V_1_sel_rd;

assign out_V_last_V_1_state_cmp_full = ((out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_last_V_1_vld_out = out_V_last_V_1_state[1'd0];

assign out_V_strb_V_1_ack_in = out_V_strb_V_1_state[1'd1];

assign out_V_strb_V_1_ack_out = out_r_TREADY;

assign out_V_strb_V_1_data_out = 3'd7;

assign out_V_strb_V_1_sel = out_V_strb_V_1_sel_rd;

assign out_V_strb_V_1_vld_out = out_V_strb_V_1_state[1'd0];

assign out_V_user_V_1_ack_in = out_V_user_V_1_state[1'd1];

assign out_V_user_V_1_ack_out = out_r_TREADY;

assign out_V_user_V_1_data_out = 1'd1;

assign out_V_user_V_1_sel = out_V_user_V_1_sel_rd;

assign out_V_user_V_1_vld_out = out_V_user_V_1_state[1'd0];

assign out_r_TDATA = out_V_data_V_1_data_out;

assign out_r_TDEST = out_V_dest_V_1_data_out;

assign out_r_TID = out_V_id_V_1_data_out;

assign out_r_TKEEP = out_V_keep_V_1_data_out;

assign out_r_TLAST = out_V_last_V_1_data_out;

assign out_r_TSTRB = out_V_strb_V_1_data_out;

assign out_r_TUSER = out_V_user_V_1_data_out;

assign out_r_TVALID = out_V_dest_V_1_state[1'd0];

assign p_Result_1_fu_415_p4 = {{in_V_data_V_0_data_out[15:8]}};

assign p_Result_3_fu_630_p4 = {{{v2_V_fu_622_p3}, {v2_V_fu_622_p3}}, {v2_V_fu_622_p3}};

assign p_Result_s_fu_405_p4 = {{in_V_data_V_0_data_out[23:16]}};

assign p_s_fu_608_p3 = ((tmp_3_fu_596_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign p_shl1_cast_fu_379_p1 = tmp_6_fu_371_p3;

assign p_shl2_cast_fu_580_p1 = tmp_21_fu_572_p3;

assign p_shl3_cast_fu_540_p1 = $signed(tmp_18_fu_532_p3);

assign p_shl4_cast_fu_552_p1 = $signed(tmp_19_fu_544_p3);

assign p_shl_cast_fu_367_p1 = tmp_1_fu_359_p3;

assign ret_V_fu_433_p2 = (lhs_V_cast_fu_425_p1 + rhs_V_cast_fu_429_p1);

assign rhs_V_cast_fu_429_p1 = p_Result_1_fu_415_p4;

assign row_2_fu_353_p2 = (row_reg_231 + 9'd1);

assign row_3_fu_481_p2 = (row_1_reg_253 + 9'd1);

assign tmp_10_fu_562_p2 = (2'd1 + tmp_15_fu_519_p1);

assign tmp_11_cast_fu_568_p1 = tmp_10_fu_562_p2;

assign tmp_11_fu_439_p1 = in_V_data_V_0_data_out[7:0];

assign tmp_12_fu_667_p2 = ($signed(tmp_14_cast_fu_663_p1) + $signed(tmp_7_cast_reg_799));

assign tmp_13_cast_fu_672_p1 = $signed(tmp_12_fu_667_p2);

assign tmp_13_fu_465_p2 = (tmp_s_reg_760 + tmp_cast_fu_461_p1);

assign tmp_14_cast_fu_663_p1 = j_reg_336;

assign tmp_14_fu_686_p2 = (2'd1 + tmp_23_fu_659_p1);

assign tmp_15_cast_fu_692_p1 = tmp_14_fu_686_p2;

assign tmp_15_fu_519_p1 = i_reg_300[1:0];

assign tmp_18_fu_532_p3 = {{tmp_9_fu_527_p2}, {9'd0}};

assign tmp_19_cast_fu_470_p1 = tmp_13_fu_465_p2;

assign tmp_19_fu_544_p3 = {{tmp_9_fu_527_p2}, {7'd0}};

assign tmp_1_fu_359_p3 = {{row_reg_231}, {9'd0}};

assign tmp_20_fu_556_p2 = ($signed(p_shl3_cast_fu_540_p1) + $signed(p_shl4_cast_fu_552_p1));

assign tmp_21_fu_572_p3 = {{tmp_10_fu_562_p2}, {2'd0}};

assign tmp_22_fu_584_p2 = (p_shl2_cast_fu_580_p1 - tmp_11_cast_fu_568_p1);

assign tmp_23_fu_659_p1 = j_reg_336[1:0];

assign tmp_24_fu_676_p2 = ($signed(tmp_20_reg_807) + $signed(tmp_13_cast_fu_672_p1));

assign tmp_25_cast_fu_681_p1 = $signed(tmp_24_fu_676_p2);

assign tmp_25_fu_696_p2 = (tmp_22_reg_812 + tmp_15_cast_fu_692_p1);

assign tmp_26_cast_fu_701_p1 = $signed(tmp_25_fu_696_p2);

assign tmp_2_fu_389_p2 = ((col_reg_242 == 10'd640) ? 1'b1 : 1'b0);

assign tmp_3_fu_596_p2 = ((edge_w_V_fu_590_p2 > 8'd200) ? 1'b1 : 1'b0);

assign tmp_4_fu_487_p2 = ((row_1_reg_253 == 9'd479) ? 1'b1 : 1'b0);

assign tmp_5_cast_fu_493_p1 = row_1_reg_253;

assign tmp_5_fu_602_p2 = ((edge_w_V_fu_590_p2 < 8'd100) ? 1'b1 : 1'b0);

assign tmp_6_fu_371_p3 = {{row_reg_231}, {7'd0}};

assign tmp_7_cast_fu_509_p1 = col_1_reg_264;

assign tmp_7_fu_616_p2 = (tmp_5_fu_602_p2 | tmp_3_fu_596_p2);

assign tmp_8_cast_fu_523_p1 = i_reg_300;

assign tmp_8_fu_641_p2 = ((col_1_reg_264 == 10'd639) ? 1'b1 : 1'b0);

assign tmp_9_fu_527_p2 = ($signed(tmp_5_cast_reg_786) + $signed(tmp_8_cast_fu_523_p1));

assign tmp_cast_fu_461_p1 = col_reg_242;

assign tmp_fu_347_p2 = ((row_reg_231 == 9'd480) ? 1'b1 : 1'b0);

assign tmp_last_V_fu_647_p2 = (tmp_8_fu_641_p2 & tmp_4_reg_781);

assign tmp_s_fu_383_p2 = (p_shl1_cast_fu_379_p1 + p_shl_cast_fu_367_p1);

assign v2_V_fu_622_p3 = ((tmp_7_fu_616_p2[0:0] === 1'b1) ? p_s_fu_608_p3 : edge_w_V_fu_590_p2);

always @ (posedge ap_clk) begin
    tmp_s_reg_760[6:0] <= 7'b0000000;
    tmp_5_cast_reg_786[9] <= 1'b0;
    tmp_7_cast_reg_799[10] <= 1'b0;
    tmp_20_reg_807[6:0] <= 7'b0000000;
end

endmodule //img_filter
